{"ast":null,"code":"var _s = $RefreshSig$();\n// navigationService.js - Cross-linking and navigation system for Groktutor platform\nimport { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\n/**\r\n * Site map - defines hierarchical structure and relationships between sections\r\n */\nconst SITE_MAP = {\n  home: {\n    title: \"Home\",\n    path: \"/\",\n    children: [\"skills\", \"live-data\", \"industries\", \"programs\", \"contests\", \"trending\", \"crypto\", \"trading\", \"bugbash\"]\n  },\n  skills: {\n    title: \"Prompt Engineering Skills\",\n    path: \"/skills\",\n    children: [\"reasoning\", \"data-analysis\", \"creative-writing\", \"coding\", \"summarization\", \"personalization\"],\n    related: [\"live-data\", \"programs\"]\n  },\n  \"live-data\": {\n    title: \"Real-Time Data\",\n    path: \"/live-data\",\n    children: [\"reddit-data\", \"twitter-data\", \"github-data\", \"huggingface-data\"],\n    related: [\"trending\", \"skills\"]\n  },\n  industries: {\n    title: \"Industry Applications\",\n    path: \"/industries\",\n    children: [\"healthcare\", \"finance\", \"legal\", \"education\", \"marketing\", \"research\"],\n    related: [\"skills\", \"programs\"]\n  },\n  programs: {\n    title: \"Learning Programs\",\n    path: \"/programs\",\n    children: [\"beginner\", \"intermediate\", \"advanced\", \"certification\"],\n    related: [\"skills\", \"industries\"]\n  },\n  contests: {\n    title: \"Prompt Engineering Contests\",\n    path: \"/contests\",\n    children: [\"active\", \"upcoming\", \"past\", \"leaderboard\"],\n    related: [\"bugbash\", \"trending\"]\n  },\n  trending: {\n    title: \"Trending Techniques\",\n    path: \"/trending\",\n    children: [\"daily\", \"weekly\", \"monthly\"],\n    related: [\"live-data\", \"skills\"]\n  },\n  crypto: {\n    title: \"Crypto Prompt Engineering\",\n    path: \"/crypto\",\n    children: [\"analysis\", \"trading\", \"fundamentals\"],\n    related: [\"trading\", \"skills\"]\n  },\n  trading: {\n    title: \"Trading Strategies\",\n    path: \"/trading\",\n    children: [\"technical\", \"sentiment\", \"fundamental\"],\n    related: [\"crypto\", \"skills\"]\n  },\n  bugbash: {\n    title: \"Bug Bash Challenges\",\n    path: \"/bugbash\",\n    children: [\"current\", \"submissions\", \"rewards\"],\n    related: [\"contests\"]\n  },\n  // Skill subcategories\n  reasoning: {\n    title: \"Reasoning & Logic\",\n    path: \"/skills/reasoning\",\n    parent: \"skills\",\n    children: [\"chain-of-thought\", \"tree-of-thought\", \"react\", \"socratic\", \"icl\"],\n    related: [\"data-analysis\", \"coding\"]\n  },\n  \"data-analysis\": {\n    title: \"Data Analysis\",\n    path: \"/skills/data-analysis\",\n    parent: \"skills\",\n    children: [\"data-formatting\", \"exploratory-analysis\", \"data-cleaning\", \"insight-generation\", \"visualization\"],\n    related: [\"reasoning\", \"coding\"]\n  },\n  \"creative-writing\": {\n    title: \"Creative Writing\",\n    path: \"/skills/creative-writing\",\n    parent: \"skills\",\n    children: [\"storytelling\", \"character-development\", \"plot-structure\", \"dialogue\"],\n    related: [\"personalization\", \"summarization\"]\n  },\n  coding: {\n    title: \"Code Generation\",\n    path: \"/skills/coding\",\n    parent: \"skills\",\n    children: [\"python\", \"javascript\", \"sql\", \"algorithms\", \"debugging\"],\n    related: [\"reasoning\", \"data-analysis\"]\n  },\n  summarization: {\n    title: \"Summarization Techniques\",\n    path: \"/skills/summarization\",\n    parent: \"skills\",\n    children: [\"extractive\", \"abstractive\", \"length-control\", \"focus-control\"],\n    related: [\"creative-writing\", \"personalization\"]\n  },\n  personalization: {\n    title: \"Personalization\",\n    path: \"/skills/personalization\",\n    parent: \"skills\",\n    children: [\"tone-adjustment\", \"complexity-control\", \"audience-adaptation\"],\n    related: [\"creative-writing\", \"summarization\"]\n  },\n  // Live data subcategories\n  \"reddit-data\": {\n    title: \"Reddit Discussions\",\n    path: \"/live-data/reddit\",\n    parent: \"live-data\",\n    related: [\"twitter-data\", \"trending\"]\n  },\n  \"twitter-data\": {\n    title: \"Twitter Insights\",\n    path: \"/live-data/twitter\",\n    parent: \"live-data\",\n    related: [\"reddit-data\", \"trending\"]\n  },\n  \"github-data\": {\n    title: \"GitHub Projects\",\n    path: \"/live-data/github\",\n    parent: \"live-data\",\n    related: [\"huggingface-data\", \"coding\"]\n  },\n  \"huggingface-data\": {\n    title: \"HuggingFace Models\",\n    path: \"/live-data/huggingface\",\n    parent: \"live-data\",\n    related: [\"github-data\", \"trending\"]\n  },\n  // Reasoning techniques\n  \"chain-of-thought\": {\n    title: \"Chain-of-Thought Prompting\",\n    path: \"/skills/reasoning/chain-of-thought\",\n    parent: \"reasoning\",\n    related: [\"tree-of-thought\", \"react\", \"socratic\"]\n  },\n  \"tree-of-thought\": {\n    title: \"Tree-of-Thought Prompting\",\n    path: \"/skills/reasoning/tree-of-thought\",\n    parent: \"reasoning\",\n    related: [\"chain-of-thought\", \"react\"]\n  },\n  \"react\": {\n    title: \"ReAct Framework\",\n    path: \"/skills/reasoning/react\",\n    parent: \"reasoning\",\n    related: [\"chain-of-thought\", \"tree-of-thought\"]\n  },\n  \"socratic\": {\n    title: \"Socratic Method\",\n    path: \"/skills/reasoning/socratic\",\n    parent: \"reasoning\",\n    related: [\"chain-of-thought\", \"icl\"]\n  },\n  \"icl\": {\n    title: \"In-Context Learning\",\n    path: \"/skills/reasoning/icl\",\n    parent: \"reasoning\",\n    related: [\"chain-of-thought\", \"socratic\"]\n  },\n  // Industries\n  \"healthcare\": {\n    title: \"Healthcare\",\n    path: \"/industries/healthcare\",\n    parent: \"industries\",\n    related: [\"research\", \"education\"]\n  },\n  \"finance\": {\n    title: \"Finance\",\n    path: \"/industries/finance\",\n    parent: \"industries\",\n    related: [\"trading\", \"crypto\"]\n  },\n  \"legal\": {\n    title: \"Legal\",\n    path: \"/industries/legal\",\n    parent: \"industries\",\n    related: [\"research\", \"summarization\"]\n  },\n  \"education\": {\n    title: \"Education\",\n    path: \"/industries/education\",\n    parent: \"industries\",\n    related: [\"creative-writing\", \"personalization\"]\n  },\n  \"marketing\": {\n    title: \"Marketing\",\n    path: \"/industries/marketing\",\n    parent: \"industries\",\n    related: [\"creative-writing\", \"personalization\"]\n  },\n  \"research\": {\n    title: \"Research\",\n    path: \"/industries/research\",\n    parent: \"industries\",\n    related: [\"data-analysis\", \"summarization\"]\n  }\n};\n\n/**\r\n * Content-based relationships to dynamically link related content across the platform\r\n * Maps content IDs to related content by category and relevance score\r\n */\nconst CONTENT_RELATIONSHIPS = {\n  // Content relationships for reasoning techniques\n  \"chain-of-thought-guide\": {\n    type: \"tutorial\",\n    category: \"chain-of-thought\",\n    relatedContent: [{\n      id: \"tree-of-thought-comparison\",\n      relevance: 0.95\n    }, {\n      id: \"reasoning-benchmark-results\",\n      relevance: 0.9\n    }, {\n      id: \"cot-reddit-discussion\",\n      relevance: 0.85\n    }, {\n      id: \"step-by-step-prompt-template\",\n      relevance: 0.8\n    }]\n  },\n  \"tree-of-thought-comparison\": {\n    type: \"comparison\",\n    category: \"tree-of-thought\",\n    relatedContent: [{\n      id: \"chain-of-thought-guide\",\n      relevance: 0.95\n    }, {\n      id: \"reasoning-benchmark-results\",\n      relevance: 0.9\n    }, {\n      id: \"tot-implementation-code\",\n      relevance: 0.85\n    }]\n  },\n  \"reasoning-benchmark-results\": {\n    type: \"research\",\n    category: \"reasoning\",\n    relatedContent: [{\n      id: \"chain-of-thought-guide\",\n      relevance: 0.9\n    }, {\n      id: \"tree-of-thought-comparison\",\n      relevance: 0.9\n    }, {\n      id: \"react-framework-tutorial\",\n      relevance: 0.8\n    }]\n  },\n  \"react-framework-tutorial\": {\n    type: \"tutorial\",\n    category: \"react\",\n    relatedContent: [{\n      id: \"chain-of-thought-guide\",\n      relevance: 0.85\n    }, {\n      id: \"tree-of-thought-comparison\",\n      relevance: 0.85\n    }, {\n      id: \"reasoning-benchmark-results\",\n      relevance: 0.8\n    }, {\n      id: \"tot-implementation-code\",\n      relevance: 0.75\n    }]\n  },\n  \"tot-implementation-code\": {\n    type: \"code\",\n    category: \"tree-of-thought\",\n    relatedContent: [{\n      id: \"tree-of-thought-comparison\",\n      relevance: 0.95\n    }, {\n      id: \"react-framework-tutorial\",\n      relevance: 0.8\n    }, {\n      id: \"github-prompt-patterns-repo\",\n      relevance: 0.75\n    }]\n  },\n  \"step-by-step-prompt-template\": {\n    type: \"template\",\n    category: \"chain-of-thought\",\n    relatedContent: [{\n      id: \"chain-of-thought-guide\",\n      relevance: 0.9\n    }, {\n      id: \"cot-reddit-discussion\",\n      relevance: 0.8\n    }, {\n      id: \"exploratory-data-prompt-guide\",\n      relevance: 0.7\n    }]\n  },\n  // Content relationships for data analysis\n  \"exploratory-data-prompt-guide\": {\n    type: \"tutorial\",\n    category: \"data-analysis\",\n    relatedContent: [{\n      id: \"data-formatting-templates\",\n      relevance: 0.9\n    }, {\n      id: \"visualization-prompt-techniques\",\n      relevance: 0.85\n    }, {\n      id: \"github-data-analysis-repo\",\n      relevance: 0.8\n    }]\n  },\n  \"data-formatting-templates\": {\n    type: \"template\",\n    category: \"data-formatting\",\n    relatedContent: [{\n      id: \"exploratory-data-prompt-guide\",\n      relevance: 0.9\n    }, {\n      id: \"visualization-prompt-techniques\",\n      relevance: 0.8\n    }, {\n      id: \"data-cleaning-techniques\",\n      relevance: 0.85\n    }]\n  },\n  \"visualization-prompt-techniques\": {\n    type: \"tutorial\",\n    category: \"visualization\",\n    relatedContent: [{\n      id: \"exploratory-data-prompt-guide\",\n      relevance: 0.85\n    }, {\n      id: \"data-formatting-templates\",\n      relevance: 0.8\n    }, {\n      id: \"github-data-analysis-repo\",\n      relevance: 0.75\n    }]\n  },\n  \"data-cleaning-techniques\": {\n    type: \"tutorial\",\n    category: \"data-cleaning\",\n    relatedContent: [{\n      id: \"data-formatting-templates\",\n      relevance: 0.85\n    }, {\n      id: \"exploratory-data-prompt-guide\",\n      relevance: 0.8\n    }, {\n      id: \"step-by-step-prompt-template\",\n      relevance: 0.7\n    }]\n  },\n  // Content relationships for real-time data\n  \"cot-reddit-discussion\": {\n    type: \"reddit\",\n    category: \"reddit-data\",\n    relatedContent: [{\n      id: \"chain-of-thought-guide\",\n      relevance: 0.85\n    }, {\n      id: \"prompt-engineer-twitter-thread\",\n      relevance: 0.75\n    }, {\n      id: \"reasoning-benchmark-results\",\n      relevance: 0.7\n    }]\n  },\n  \"prompt-engineer-twitter-thread\": {\n    type: \"twitter\",\n    category: \"twitter-data\",\n    relatedContent: [{\n      id: \"github-prompt-patterns-repo\",\n      relevance: 0.8\n    }, {\n      id: \"cot-reddit-discussion\",\n      relevance: 0.75\n    }]\n  },\n  \"github-prompt-patterns-repo\": {\n    type: \"github\",\n    category: \"github-data\",\n    relatedContent: [{\n      id: \"prompt-engineer-twitter-thread\",\n      relevance: 0.8\n    }, {\n      id: \"prompt-tuning-toolkit-model\",\n      relevance: 0.85\n    }, {\n      id: \"tot-implementation-code\",\n      relevance: 0.7\n    }]\n  },\n  \"prompt-tuning-toolkit-model\": {\n    type: \"huggingface\",\n    category: \"huggingface-data\",\n    relatedContent: [{\n      id: \"github-prompt-patterns-repo\",\n      relevance: 0.85\n    }, {\n      id: \"llama-model-card\",\n      relevance: 0.75\n    }]\n  },\n  \"llama-model-card\": {\n    type: \"huggingface\",\n    category: \"huggingface-data\",\n    relatedContent: [{\n      id: \"prompt-tuning-toolkit-model\",\n      relevance: 0.75\n    }, {\n      id: \"github-prompt-patterns-repo\",\n      relevance: 0.7\n    }, {\n      id: \"github-data-analysis-repo\",\n      relevance: 0.65\n    }]\n  },\n  \"github-data-analysis-repo\": {\n    type: \"github\",\n    category: \"github-data\",\n    relatedContent: [{\n      id: \"visualization-prompt-techniques\",\n      relevance: 0.8\n    }, {\n      id: \"exploratory-data-prompt-guide\",\n      relevance: 0.75\n    }, {\n      id: \"llama-model-card\",\n      relevance: 0.65\n    }]\n  }\n};\n\n/**\r\n * Popular Content - Hard-coded for demo purposes\r\n */\nconst POPULAR_CONTENT = [{\n  id: \"chain-of-thought-guide\",\n  popularity: 95,\n  ...CONTENT_RELATIONSHIPS[\"chain-of-thought-guide\"]\n}, {\n  id: \"tree-of-thought-comparison\",\n  popularity: 85,\n  ...CONTENT_RELATIONSHIPS[\"tree-of-thought-comparison\"]\n}, {\n  id: \"cot-reddit-discussion\",\n  popularity: 80,\n  ...CONTENT_RELATIONSHIPS[\"cot-reddit-discussion\"]\n}, {\n  id: \"github-prompt-patterns-repo\",\n  popularity: 75,\n  ...CONTENT_RELATIONSHIPS[\"github-prompt-patterns-repo\"]\n}, {\n  id: \"exploratory-data-prompt-guide\",\n  popularity: 70,\n  ...CONTENT_RELATIONSHIPS[\"exploratory-data-prompt-guide\"]\n}];\n\n/**\r\n * Navigation Service Implementation\r\n */\nclass NavigationService {\n  constructor() {\n    this.currentPath = \"/\";\n    this.history = [\"/\"];\n    this.contentViewHistory = [];\n    this.eventListeners = {};\n  }\n\n  /**\r\n   * Navigate to a specific path\r\n   * @param {string} path - The path to navigate to\r\n   * @param {boolean} addToHistory - Whether to add to browser history\r\n   */\n  navigateTo(path, addToHistory = true) {\n    this.currentPath = path;\n    this.history.push(path);\n    this.notifyPathChange(path);\n    return this.getSectionInfo(path);\n  }\n\n  /**\r\n   * Register event listener\r\n   * @param {string} event - Event name\r\n   * @param {Function} callback - Event callback\r\n   */\n  addEventListener(event, callback) {\n    if (!this.eventListeners[event]) {\n      this.eventListeners[event] = [];\n    }\n    this.eventListeners[event].push(callback);\n\n    // Return unsubscribe function\n    return () => {\n      this.eventListeners[event] = this.eventListeners[event].filter(cb => cb !== callback);\n    };\n  }\n\n  /**\r\n   * Notify event listeners\r\n   * @param {string} event - Event name\r\n   * @param {*} data - Event data\r\n   */\n  notifyListeners(event, data) {\n    if (this.eventListeners[event]) {\n      this.eventListeners[event].forEach(callback => {\n        callback(data);\n      });\n    }\n  }\n\n  /**\r\n   * Notify subscribers that the path has changed\r\n   * @param {string} path - The new path\r\n   */\n  notifyPathChange(path) {\n    this.notifyListeners('pathChanged', {\n      path\n    });\n\n    // Dispatch custom event for React components\n    const event = new CustomEvent('navigation:pathChanged', {\n      detail: {\n        path\n      }\n    });\n    document.dispatchEvent(event);\n\n    // Track page view for analytics\n    this.trackPageView(path);\n  }\n\n  /**\r\n   * Track page view for analytics\r\n   * @param {string} path - The path being viewed\r\n   */\n  trackPageView(path) {\n    // In a real implementation, this would send data to an analytics service\n    console.log(`Analytics: Page view tracked for ${path}`);\n  }\n\n  /**\r\n   * Record content view history for personalization\r\n   * @param {string} contentId - The ID of the viewed content\r\n   * @param {string} contentType - The type of content viewed\r\n   * @param {string} category - The category of the content\r\n   */\n  recordContentView(contentId, contentType, category) {\n    this.contentViewHistory.push({\n      contentId,\n      contentType,\n      category,\n      timestamp: new Date().toISOString()\n    });\n\n    // Limit history length to prevent memory issues\n    if (this.contentViewHistory.length > 100) {\n      this.contentViewHistory.shift();\n    }\n\n    // Notify event listeners\n    this.notifyListeners('contentViewed', {\n      contentId,\n      contentType,\n      category\n    });\n  }\n\n  /**\r\n   * Get information about a section by its path\r\n   * @param {string} path - The path of the section\r\n   * @returns {Object|null} The section information or null if not found\r\n   */\n  getSectionInfo(path) {\n    // Find the section with the matching path\n    const key = Object.keys(SITE_MAP).find(key => SITE_MAP[key].path === path);\n    return key ? {\n      id: key,\n      ...SITE_MAP[key]\n    } : null;\n  }\n\n  /**\r\n   * Get information about a section by its ID\r\n   * @param {string} id - The ID of the section\r\n   * @returns {Object|null} The section information or null if not found\r\n   */\n  getSectionById(id) {\n    return SITE_MAP[id] ? {\n      id,\n      ...SITE_MAP[id]\n    } : null;\n  }\n\n  /**\r\n   * Generate breadcrumbs for a given path\r\n   * @param {string} path - The path to generate breadcrumbs for\r\n   * @returns {Array<Object>} Array of breadcrumb objects\r\n   */\n  generateBreadcrumbs(path) {\n    const section = this.getSectionInfo(path);\n    if (!section) return [{\n      id: 'home',\n      title: 'Home',\n      path: '/'\n    }];\n    const breadcrumbs = [{\n      id: 'home',\n      title: 'Home',\n      path: '/'\n    }];\n    if (section.parent) {\n      const parent = this.getSectionById(section.parent);\n\n      // Check for grandparent\n      if (parent.parent) {\n        const grandparent = this.getSectionById(parent.parent);\n        breadcrumbs.push({\n          id: grandparent.id,\n          title: grandparent.title,\n          path: grandparent.path\n        });\n      }\n      breadcrumbs.push({\n        id: parent.id,\n        title: parent.title,\n        path: parent.path\n      });\n    }\n\n    // Add current section\n    if (section.id !== 'home') {\n      breadcrumbs.push({\n        id: section.id,\n        title: section.title,\n        path: section.path\n      });\n    }\n    return breadcrumbs;\n  }\n\n  /**\r\n   * Get child sections for a given section ID\r\n   * @param {string} sectionId - The ID of the parent section\r\n   * @returns {Array<Object>} Array of child section objects\r\n   */\n  getChildSections(sectionId) {\n    const section = this.getSectionById(sectionId);\n    if (!section || !section.children) return [];\n    return section.children.map(childId => this.getSectionById(childId)).filter(Boolean);\n  }\n\n  /**\r\n   * Get related sections for a given section ID\r\n   * @param {string} sectionId - The ID of the section\r\n   * @returns {Array<Object>} Array of related section objects\r\n   */\n  getRelatedSections(sectionId) {\n    const section = this.getSectionById(sectionId);\n    if (!section || !section.related) return [];\n    return section.related.map(relatedId => this.getSectionById(relatedId)).filter(Boolean);\n  }\n\n  /**\r\n   * Get related content for a specific content item\r\n   * @param {string} contentId - The ID of the content\r\n   * @param {number} limit - Maximum number of related items to return\r\n   * @returns {Array<Object>} Array of related content objects\r\n   */\n  getRelatedContent(contentId, limit = 5) {\n    const contentItem = CONTENT_RELATIONSHIPS[contentId];\n    if (!contentItem || !contentItem.relatedContent) return [];\n\n    // Sort by relevance and limit results\n    return contentItem.relatedContent.sort((a, b) => b.relevance - a.relevance).slice(0, limit).map(related => ({\n      ...related,\n      ...CONTENT_RELATIONSHIPS[related.id]\n    })).filter(Boolean);\n  }\n\n  /**\r\n   * Get recommended content based on user's viewing history\r\n   * @param {number} limit - Maximum number of recommendations to return\r\n   * @returns {Array<Object>} Array of recommended content objects\r\n   */\n  getPersonalizedRecommendations(limit = 5) {\n    if (this.contentViewHistory.length === 0) {\n      // No history, return generic popular content\n      return this.getPopularContent(limit);\n    }\n\n    // Get categories from recent history (last 10 items)\n    const recentCategories = this.contentViewHistory.slice(-10).map(item => item.category);\n\n    // Count category occurrences\n    const categoryCounts = recentCategories.reduce((counts, category) => {\n      counts[category] = (counts[category] || 0) + 1;\n      return counts;\n    }, {});\n\n    // Sort categories by count\n    const topCategories = Object.keys(categoryCounts).sort((a, b) => categoryCounts[b] - categoryCounts[a]).slice(0, 3);\n\n    // Get content related to top categories\n    const recommendations = Object.keys(CONTENT_RELATIONSHIPS).filter(contentId => {\n      const content = CONTENT_RELATIONSHIPS[contentId];\n      return topCategories.includes(content.category);\n    })\n    // Filter out recently viewed content\n    .filter(contentId => !this.contentViewHistory.slice(-10).some(item => item.contentId === contentId)).slice(0, limit).map(contentId => ({\n      id: contentId,\n      ...CONTENT_RELATIONSHIPS[contentId]\n    }));\n    return recommendations.length > 0 ? recommendations : this.getPopularContent(limit);\n  }\n\n  /**\r\n   * Get popular content across the platform\r\n   * @param {number} limit - Maximum number of items to return\r\n   * @returns {Array<Object>} Array of popular content objects\r\n   */\n  getPopularContent(limit = 5) {\n    // In a real implementation, this would query a database or analytics service\n    return POPULAR_CONTENT.slice(0, limit);\n  }\n\n  /**\r\n   * Search for content and sections matching a query\r\n   * @param {string} query - The search query\r\n   * @returns {Object} Object with sections and content arrays\r\n   */\n  search(query) {\n    if (!query || query.trim() === '') {\n      return {\n        sections: [],\n        content: []\n      };\n    }\n    const lowerQuery = query.toLowerCase().trim();\n\n    // Search sections\n    const matchingSections = Object.keys(SITE_MAP).filter(key => {\n      const section = SITE_MAP[key];\n      return section.title.toLowerCase().includes(lowerQuery) || key.toLowerCase().includes(lowerQuery);\n    }).map(key => ({\n      id: key,\n      ...SITE_MAP[key]\n    }));\n\n    // Search content\n    const matchingContent = Object.keys(CONTENT_RELATIONSHIPS).filter(key => {\n      const content = CONTENT_RELATIONSHIPS[key];\n      return key.toLowerCase().includes(lowerQuery) || content.category.toLowerCase().includes(lowerQuery) || content.type.toLowerCase().includes(lowerQuery);\n    }).map(key => ({\n      id: key,\n      ...CONTENT_RELATIONSHIPS[key]\n    }));\n    return {\n      sections: matchingSections,\n      content: matchingContent\n    };\n  }\n\n  /**\r\n   * Generate navigation links for a specific section\r\n   * @param {string} sectionId - The ID of the section\r\n   * @returns {Object} Navigation links for the section\r\n   */\n  getNavigationLinks(sectionId) {\n    const section = this.getSectionById(sectionId);\n    if (!section) return {\n      parent: null,\n      siblings: [],\n      children: [],\n      related: []\n    };\n\n    // Get parent\n    const parent = section.parent ? this.getSectionById(section.parent) : null;\n\n    // Get siblings (other sections with the same parent)\n    let siblings = [];\n    if (parent && parent.children) {\n      siblings = parent.children.filter(id => id !== sectionId).map(id => this.getSectionById(id)).filter(Boolean);\n    } else if (sectionId !== 'home') {\n      // If no parent (top-level section), siblings are other top-level sections\n      siblings = SITE_MAP.home.children.filter(id => id !== sectionId).map(id => this.getSectionById(id)).filter(Boolean);\n    }\n\n    // Get children\n    const children = section.children ? section.children.map(id => this.getSectionById(id)).filter(Boolean) : [];\n\n    // Get related sections\n    const related = section.related ? section.related.map(id => this.getSectionById(id)).filter(Boolean) : [];\n    return {\n      parent: parent ? {\n        id: section.parent,\n        ...parent\n      } : null,\n      siblings,\n      children,\n      related\n    };\n  }\n}\n\n// Create a singleton instance\nconst navigationService = new NavigationService();\n\n/**\r\n * React hook for using the navigation service in components\r\n */\nexport function useNavigation() {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [currentPath, setCurrentPath] = useState(location.pathname);\n  useEffect(() => {\n    // Update current path when location changes\n    setCurrentPath(location.pathname);\n    navigationService.currentPath = location.pathname;\n  }, [location.pathname]);\n  useEffect(() => {\n    // Subscribe to path changes\n    const handlePathChange = e => {\n      setCurrentPath(e.detail.path);\n    };\n\n    // Add event listener for path changes\n    document.addEventListener('navigation:pathChanged', handlePathChange);\n\n    // Cleanup on unmount\n    return () => {\n      document.removeEventListener('navigation:pathChanged', handlePathChange);\n    };\n  }, []);\n  return {\n    currentPath,\n    navigateTo: path => {\n      navigate(path);\n      navigationService.navigateTo(path);\n    },\n    getSectionInfo: path => navigationService.getSectionInfo(path || currentPath),\n    getSectionById: id => navigationService.getSectionById(id),\n    getBreadcrumbs: path => navigationService.generateBreadcrumbs(path || currentPath),\n    getChildSections: sectionId => navigationService.getChildSections(sectionId),\n    getRelatedSections: sectionId => navigationService.getRelatedSections(sectionId),\n    getRelatedContent: (contentId, limit) => navigationService.getRelatedContent(contentId, limit),\n    getRecommendations: limit => navigationService.getPersonalizedRecommendations(limit),\n    recordContentView: (contentId, contentType, category) => navigationService.recordContentView(contentId, contentType, category),\n    search: query => navigationService.search(query),\n    getNavigationLinks: sectionId => navigationService.getNavigationLinks(sectionId)\n  };\n}\n_s(useNavigation, \"ckfW4F4UGZaOpmB9BUL5S2o9UqQ=\", false, function () {\n  return [useNavigate, useLocation];\n});\nexport default navigationService;","map":{"version":3,"names":["useState","useEffect","useNavigate","useLocation","SITE_MAP","home","title","path","children","skills","related","industries","programs","contests","trending","crypto","trading","bugbash","reasoning","parent","coding","summarization","personalization","CONTENT_RELATIONSHIPS","type","category","relatedContent","id","relevance","POPULAR_CONTENT","popularity","NavigationService","constructor","currentPath","history","contentViewHistory","eventListeners","navigateTo","addToHistory","push","notifyPathChange","getSectionInfo","addEventListener","event","callback","filter","cb","notifyListeners","data","forEach","CustomEvent","detail","document","dispatchEvent","trackPageView","console","log","recordContentView","contentId","contentType","timestamp","Date","toISOString","length","shift","key","Object","keys","find","getSectionById","generateBreadcrumbs","section","breadcrumbs","grandparent","getChildSections","sectionId","map","childId","Boolean","getRelatedSections","relatedId","getRelatedContent","limit","contentItem","sort","a","b","slice","getPersonalizedRecommendations","getPopularContent","recentCategories","item","categoryCounts","reduce","counts","topCategories","recommendations","content","includes","some","search","query","trim","sections","lowerQuery","toLowerCase","matchingSections","matchingContent","getNavigationLinks","siblings","navigationService","useNavigation","_s","navigate","location","setCurrentPath","pathname","handlePathChange","e","removeEventListener","getBreadcrumbs","getRecommendations"],"sources":["D:/Groktutuor/groktutor-new/src/services/navigationService.js"],"sourcesContent":["// navigationService.js - Cross-linking and navigation system for Groktutor platform\r\nimport { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\n/**\r\n * Site map - defines hierarchical structure and relationships between sections\r\n */\r\nconst SITE_MAP = {\r\n  home: {\r\n    title: \"Home\",\r\n    path: \"/\",\r\n    children: [\"skills\", \"live-data\", \"industries\", \"programs\", \"contests\", \"trending\", \"crypto\", \"trading\", \"bugbash\"]\r\n  },\r\n  skills: {\r\n    title: \"Prompt Engineering Skills\",\r\n    path: \"/skills\",\r\n    children: [\"reasoning\", \"data-analysis\", \"creative-writing\", \"coding\", \"summarization\", \"personalization\"],\r\n    related: [\"live-data\", \"programs\"]\r\n  },\r\n  \"live-data\": {\r\n    title: \"Real-Time Data\",\r\n    path: \"/live-data\",\r\n    children: [\"reddit-data\", \"twitter-data\", \"github-data\", \"huggingface-data\"],\r\n    related: [\"trending\", \"skills\"]\r\n  },\r\n  industries: {\r\n    title: \"Industry Applications\",\r\n    path: \"/industries\",\r\n    children: [\"healthcare\", \"finance\", \"legal\", \"education\", \"marketing\", \"research\"],\r\n    related: [\"skills\", \"programs\"]\r\n  },\r\n  programs: {\r\n    title: \"Learning Programs\",\r\n    path: \"/programs\",\r\n    children: [\"beginner\", \"intermediate\", \"advanced\", \"certification\"],\r\n    related: [\"skills\", \"industries\"]\r\n  },\r\n  contests: {\r\n    title: \"Prompt Engineering Contests\",\r\n    path: \"/contests\",\r\n    children: [\"active\", \"upcoming\", \"past\", \"leaderboard\"],\r\n    related: [\"bugbash\", \"trending\"]\r\n  },\r\n  trending: {\r\n    title: \"Trending Techniques\",\r\n    path: \"/trending\",\r\n    children: [\"daily\", \"weekly\", \"monthly\"],\r\n    related: [\"live-data\", \"skills\"]\r\n  },\r\n  crypto: {\r\n    title: \"Crypto Prompt Engineering\",\r\n    path: \"/crypto\",\r\n    children: [\"analysis\", \"trading\", \"fundamentals\"],\r\n    related: [\"trading\", \"skills\"]\r\n  },\r\n  trading: {\r\n    title: \"Trading Strategies\",\r\n    path: \"/trading\",\r\n    children: [\"technical\", \"sentiment\", \"fundamental\"],\r\n    related: [\"crypto\", \"skills\"]\r\n  },\r\n  bugbash: {\r\n    title: \"Bug Bash Challenges\",\r\n    path: \"/bugbash\",\r\n    children: [\"current\", \"submissions\", \"rewards\"],\r\n    related: [\"contests\"]\r\n  },\r\n  // Skill subcategories\r\n  reasoning: {\r\n    title: \"Reasoning & Logic\",\r\n    path: \"/skills/reasoning\",\r\n    parent: \"skills\",\r\n    children: [\"chain-of-thought\", \"tree-of-thought\", \"react\", \"socratic\", \"icl\"],\r\n    related: [\"data-analysis\", \"coding\"]\r\n  },\r\n  \"data-analysis\": {\r\n    title: \"Data Analysis\",\r\n    path: \"/skills/data-analysis\",\r\n    parent: \"skills\",\r\n    children: [\"data-formatting\", \"exploratory-analysis\", \"data-cleaning\", \"insight-generation\", \"visualization\"],\r\n    related: [\"reasoning\", \"coding\"]\r\n  },\r\n  \"creative-writing\": {\r\n    title: \"Creative Writing\",\r\n    path: \"/skills/creative-writing\",\r\n    parent: \"skills\",\r\n    children: [\"storytelling\", \"character-development\", \"plot-structure\", \"dialogue\"],\r\n    related: [\"personalization\", \"summarization\"]\r\n  },\r\n  coding: {\r\n    title: \"Code Generation\",\r\n    path: \"/skills/coding\",\r\n    parent: \"skills\",\r\n    children: [\"python\", \"javascript\", \"sql\", \"algorithms\", \"debugging\"],\r\n    related: [\"reasoning\", \"data-analysis\"]\r\n  },\r\n  summarization: {\r\n    title: \"Summarization Techniques\",\r\n    path: \"/skills/summarization\",\r\n    parent: \"skills\",\r\n    children: [\"extractive\", \"abstractive\", \"length-control\", \"focus-control\"],\r\n    related: [\"creative-writing\", \"personalization\"]\r\n  },\r\n  personalization: {\r\n    title: \"Personalization\",\r\n    path: \"/skills/personalization\",\r\n    parent: \"skills\",\r\n    children: [\"tone-adjustment\", \"complexity-control\", \"audience-adaptation\"],\r\n    related: [\"creative-writing\", \"summarization\"]\r\n  },\r\n  // Live data subcategories\r\n  \"reddit-data\": {\r\n    title: \"Reddit Discussions\",\r\n    path: \"/live-data/reddit\",\r\n    parent: \"live-data\",\r\n    related: [\"twitter-data\", \"trending\"]\r\n  },\r\n  \"twitter-data\": {\r\n    title: \"Twitter Insights\",\r\n    path: \"/live-data/twitter\",\r\n    parent: \"live-data\",\r\n    related: [\"reddit-data\", \"trending\"]\r\n  },\r\n  \"github-data\": {\r\n    title: \"GitHub Projects\",\r\n    path: \"/live-data/github\",\r\n    parent: \"live-data\",\r\n    related: [\"huggingface-data\", \"coding\"]\r\n  },\r\n  \"huggingface-data\": {\r\n    title: \"HuggingFace Models\",\r\n    path: \"/live-data/huggingface\",\r\n    parent: \"live-data\",\r\n    related: [\"github-data\", \"trending\"]\r\n  },\r\n  // Reasoning techniques\r\n  \"chain-of-thought\": {\r\n    title: \"Chain-of-Thought Prompting\",\r\n    path: \"/skills/reasoning/chain-of-thought\",\r\n    parent: \"reasoning\",\r\n    related: [\"tree-of-thought\", \"react\", \"socratic\"]\r\n  },\r\n  \"tree-of-thought\": {\r\n    title: \"Tree-of-Thought Prompting\",\r\n    path: \"/skills/reasoning/tree-of-thought\",\r\n    parent: \"reasoning\",\r\n    related: [\"chain-of-thought\", \"react\"]\r\n  },\r\n  \"react\": {\r\n    title: \"ReAct Framework\",\r\n    path: \"/skills/reasoning/react\",\r\n    parent: \"reasoning\",\r\n    related: [\"chain-of-thought\", \"tree-of-thought\"]\r\n  },\r\n  \"socratic\": {\r\n    title: \"Socratic Method\",\r\n    path: \"/skills/reasoning/socratic\",\r\n    parent: \"reasoning\",\r\n    related: [\"chain-of-thought\", \"icl\"]\r\n  },\r\n  \"icl\": {\r\n    title: \"In-Context Learning\",\r\n    path: \"/skills/reasoning/icl\",\r\n    parent: \"reasoning\",\r\n    related: [\"chain-of-thought\", \"socratic\"]\r\n  },\r\n  // Industries\r\n  \"healthcare\": {\r\n    title: \"Healthcare\",\r\n    path: \"/industries/healthcare\",\r\n    parent: \"industries\",\r\n    related: [\"research\", \"education\"]\r\n  },\r\n  \"finance\": {\r\n    title: \"Finance\",\r\n    path: \"/industries/finance\",\r\n    parent: \"industries\",\r\n    related: [\"trading\", \"crypto\"]\r\n  },\r\n  \"legal\": {\r\n    title: \"Legal\",\r\n    path: \"/industries/legal\",\r\n    parent: \"industries\",\r\n    related: [\"research\", \"summarization\"]\r\n  },\r\n  \"education\": {\r\n    title: \"Education\",\r\n    path: \"/industries/education\",\r\n    parent: \"industries\",\r\n    related: [\"creative-writing\", \"personalization\"]\r\n  },\r\n  \"marketing\": {\r\n    title: \"Marketing\",\r\n    path: \"/industries/marketing\",\r\n    parent: \"industries\",\r\n    related: [\"creative-writing\", \"personalization\"]\r\n  },\r\n  \"research\": {\r\n    title: \"Research\",\r\n    path: \"/industries/research\",\r\n    parent: \"industries\",\r\n    related: [\"data-analysis\", \"summarization\"]\r\n  }\r\n};\r\n\r\n/**\r\n * Content-based relationships to dynamically link related content across the platform\r\n * Maps content IDs to related content by category and relevance score\r\n */\r\nconst CONTENT_RELATIONSHIPS = {\r\n  // Content relationships for reasoning techniques\r\n  \"chain-of-thought-guide\": {\r\n    type: \"tutorial\",\r\n    category: \"chain-of-thought\",\r\n    relatedContent: [\r\n      { id: \"tree-of-thought-comparison\", relevance: 0.95 },\r\n      { id: \"reasoning-benchmark-results\", relevance: 0.9 },\r\n      { id: \"cot-reddit-discussion\", relevance: 0.85 },\r\n      { id: \"step-by-step-prompt-template\", relevance: 0.8 }\r\n    ]\r\n  },\r\n  \"tree-of-thought-comparison\": {\r\n    type: \"comparison\",\r\n    category: \"tree-of-thought\",\r\n    relatedContent: [\r\n      { id: \"chain-of-thought-guide\", relevance: 0.95 },\r\n      { id: \"reasoning-benchmark-results\", relevance: 0.9 },\r\n      { id: \"tot-implementation-code\", relevance: 0.85 }\r\n    ]\r\n  },\r\n  \"reasoning-benchmark-results\": {\r\n    type: \"research\",\r\n    category: \"reasoning\",\r\n    relatedContent: [\r\n      { id: \"chain-of-thought-guide\", relevance: 0.9 },\r\n      { id: \"tree-of-thought-comparison\", relevance: 0.9 },\r\n      { id: \"react-framework-tutorial\", relevance: 0.8 }\r\n    ]\r\n  },\r\n  \"react-framework-tutorial\": {\r\n    type: \"tutorial\",\r\n    category: \"react\",\r\n    relatedContent: [\r\n      { id: \"chain-of-thought-guide\", relevance: 0.85 },\r\n      { id: \"tree-of-thought-comparison\", relevance: 0.85 },\r\n      { id: \"reasoning-benchmark-results\", relevance: 0.8 },\r\n      { id: \"tot-implementation-code\", relevance: 0.75 }\r\n    ]\r\n  },\r\n  \"tot-implementation-code\": {\r\n    type: \"code\",\r\n    category: \"tree-of-thought\",\r\n    relatedContent: [\r\n      { id: \"tree-of-thought-comparison\", relevance: 0.95 },\r\n      { id: \"react-framework-tutorial\", relevance: 0.8 },\r\n      { id: \"github-prompt-patterns-repo\", relevance: 0.75 }\r\n    ]\r\n  },\r\n  \"step-by-step-prompt-template\": {\r\n    type: \"template\",\r\n    category: \"chain-of-thought\",\r\n    relatedContent: [\r\n      { id: \"chain-of-thought-guide\", relevance: 0.9 },\r\n      { id: \"cot-reddit-discussion\", relevance: 0.8 },\r\n      { id: \"exploratory-data-prompt-guide\", relevance: 0.7 }\r\n    ]\r\n  },\r\n  \r\n  // Content relationships for data analysis\r\n  \"exploratory-data-prompt-guide\": {\r\n    type: \"tutorial\",\r\n    category: \"data-analysis\",\r\n    relatedContent: [\r\n      { id: \"data-formatting-templates\", relevance: 0.9 },\r\n      { id: \"visualization-prompt-techniques\", relevance: 0.85 },\r\n      { id: \"github-data-analysis-repo\", relevance: 0.8 }\r\n    ]\r\n  },\r\n  \"data-formatting-templates\": {\r\n    type: \"template\",\r\n    category: \"data-formatting\",\r\n    relatedContent: [\r\n      { id: \"exploratory-data-prompt-guide\", relevance: 0.9 },\r\n      { id: \"visualization-prompt-techniques\", relevance: 0.8 },\r\n      { id: \"data-cleaning-techniques\", relevance: 0.85 }\r\n    ]\r\n  },\r\n  \"visualization-prompt-techniques\": {\r\n    type: \"tutorial\",\r\n    category: \"visualization\",\r\n    relatedContent: [\r\n      { id: \"exploratory-data-prompt-guide\", relevance: 0.85 },\r\n      { id: \"data-formatting-templates\", relevance: 0.8 },\r\n      { id: \"github-data-analysis-repo\", relevance: 0.75 }\r\n    ]\r\n  },\r\n  \"data-cleaning-techniques\": {\r\n    type: \"tutorial\",\r\n    category: \"data-cleaning\",\r\n    relatedContent: [\r\n      { id: \"data-formatting-templates\", relevance: 0.85 },\r\n      { id: \"exploratory-data-prompt-guide\", relevance: 0.8 },\r\n      { id: \"step-by-step-prompt-template\", relevance: 0.7 }\r\n    ]\r\n  },\r\n  \r\n  // Content relationships for real-time data\r\n  \"cot-reddit-discussion\": {\r\n    type: \"reddit\",\r\n    category: \"reddit-data\",\r\n    relatedContent: [\r\n      { id: \"chain-of-thought-guide\", relevance: 0.85 },\r\n      { id: \"prompt-engineer-twitter-thread\", relevance: 0.75 },\r\n      { id: \"reasoning-benchmark-results\", relevance: 0.7 }\r\n    ]\r\n  },\r\n  \"prompt-engineer-twitter-thread\": {\r\n    type: \"twitter\",\r\n    category: \"twitter-data\",\r\n    relatedContent: [\r\n      { id: \"github-prompt-patterns-repo\", relevance: 0.8 },\r\n      { id: \"cot-reddit-discussion\", relevance: 0.75 }\r\n    ]\r\n  },\r\n  \"github-prompt-patterns-repo\": {\r\n    type: \"github\",\r\n    category: \"github-data\",\r\n    relatedContent: [\r\n      { id: \"prompt-engineer-twitter-thread\", relevance: 0.8 },\r\n      { id: \"prompt-tuning-toolkit-model\", relevance: 0.85 },\r\n      { id: \"tot-implementation-code\", relevance: 0.7 }\r\n    ]\r\n  },\r\n  \"prompt-tuning-toolkit-model\": {\r\n    type: \"huggingface\",\r\n    category: \"huggingface-data\",\r\n    relatedContent: [\r\n      { id: \"github-prompt-patterns-repo\", relevance: 0.85 },\r\n      { id: \"llama-model-card\", relevance: 0.75 }\r\n    ]\r\n  },\r\n  \"llama-model-card\": {\r\n    type: \"huggingface\",\r\n    category: \"huggingface-data\",\r\n    relatedContent: [\r\n      { id: \"prompt-tuning-toolkit-model\", relevance: 0.75 },\r\n      { id: \"github-prompt-patterns-repo\", relevance: 0.7 },\r\n      { id: \"github-data-analysis-repo\", relevance: 0.65 }\r\n    ]\r\n  },\r\n  \"github-data-analysis-repo\": {\r\n    type: \"github\",\r\n    category: \"github-data\",\r\n    relatedContent: [\r\n      { id: \"visualization-prompt-techniques\", relevance: 0.8 },\r\n      { id: \"exploratory-data-prompt-guide\", relevance: 0.75 },\r\n      { id: \"llama-model-card\", relevance: 0.65 }\r\n    ]\r\n  }\r\n};\r\n\r\n/**\r\n * Popular Content - Hard-coded for demo purposes\r\n */\r\nconst POPULAR_CONTENT = [\r\n  { id: \"chain-of-thought-guide\", popularity: 95, ...CONTENT_RELATIONSHIPS[\"chain-of-thought-guide\"] },\r\n  { id: \"tree-of-thought-comparison\", popularity: 85, ...CONTENT_RELATIONSHIPS[\"tree-of-thought-comparison\"] },\r\n  { id: \"cot-reddit-discussion\", popularity: 80, ...CONTENT_RELATIONSHIPS[\"cot-reddit-discussion\"] },\r\n  { id: \"github-prompt-patterns-repo\", popularity: 75, ...CONTENT_RELATIONSHIPS[\"github-prompt-patterns-repo\"] },\r\n  { id: \"exploratory-data-prompt-guide\", popularity: 70, ...CONTENT_RELATIONSHIPS[\"exploratory-data-prompt-guide\"] },\r\n];\r\n\r\n/**\r\n * Navigation Service Implementation\r\n */\r\nclass NavigationService {\r\n  constructor() {\r\n    this.currentPath = \"/\";\r\n    this.history = [\"/\"];\r\n    this.contentViewHistory = [];\r\n    this.eventListeners = {};\r\n  }\r\n  \r\n  /**\r\n   * Navigate to a specific path\r\n   * @param {string} path - The path to navigate to\r\n   * @param {boolean} addToHistory - Whether to add to browser history\r\n   */\r\n  navigateTo(path, addToHistory = true) {\r\n    this.currentPath = path;\r\n    this.history.push(path);\r\n    this.notifyPathChange(path);\r\n    return this.getSectionInfo(path);\r\n  }\r\n  \r\n  /**\r\n   * Register event listener\r\n   * @param {string} event - Event name\r\n   * @param {Function} callback - Event callback\r\n   */\r\n  addEventListener(event, callback) {\r\n    if (!this.eventListeners[event]) {\r\n      this.eventListeners[event] = [];\r\n    }\r\n    this.eventListeners[event].push(callback);\r\n    \r\n    // Return unsubscribe function\r\n    return () => {\r\n      this.eventListeners[event] = this.eventListeners[event].filter(cb => cb !== callback);\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Notify event listeners\r\n   * @param {string} event - Event name\r\n   * @param {*} data - Event data\r\n   */\r\n  notifyListeners(event, data) {\r\n    if (this.eventListeners[event]) {\r\n      this.eventListeners[event].forEach(callback => {\r\n        callback(data);\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Notify subscribers that the path has changed\r\n   * @param {string} path - The new path\r\n   */\r\n  notifyPathChange(path) {\r\n    this.notifyListeners('pathChanged', { path });\r\n    \r\n    // Dispatch custom event for React components\r\n    const event = new CustomEvent('navigation:pathChanged', { detail: { path } });\r\n    document.dispatchEvent(event);\r\n    \r\n    // Track page view for analytics\r\n    this.trackPageView(path);\r\n  }\r\n  \r\n  /**\r\n   * Track page view for analytics\r\n   * @param {string} path - The path being viewed\r\n   */\r\n  trackPageView(path) {\r\n    // In a real implementation, this would send data to an analytics service\r\n    console.log(`Analytics: Page view tracked for ${path}`);\r\n  }\r\n  \r\n  /**\r\n   * Record content view history for personalization\r\n   * @param {string} contentId - The ID of the viewed content\r\n   * @param {string} contentType - The type of content viewed\r\n   * @param {string} category - The category of the content\r\n   */\r\n  recordContentView(contentId, contentType, category) {\r\n    this.contentViewHistory.push({\r\n      contentId,\r\n      contentType,\r\n      category,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    // Limit history length to prevent memory issues\r\n    if (this.contentViewHistory.length > 100) {\r\n      this.contentViewHistory.shift();\r\n    }\r\n    \r\n    // Notify event listeners\r\n    this.notifyListeners('contentViewed', { contentId, contentType, category });\r\n  }\r\n  \r\n  /**\r\n   * Get information about a section by its path\r\n   * @param {string} path - The path of the section\r\n   * @returns {Object|null} The section information or null if not found\r\n   */\r\n  getSectionInfo(path) {\r\n    // Find the section with the matching path\r\n    const key = Object.keys(SITE_MAP).find(key => SITE_MAP[key].path === path);\r\n    return key ? { id: key, ...SITE_MAP[key] } : null;\r\n  }\r\n  \r\n  /**\r\n   * Get information about a section by its ID\r\n   * @param {string} id - The ID of the section\r\n   * @returns {Object|null} The section information or null if not found\r\n   */\r\n  getSectionById(id) {\r\n    return SITE_MAP[id] ? { id, ...SITE_MAP[id] } : null;\r\n  }\r\n  \r\n  /**\r\n   * Generate breadcrumbs for a given path\r\n   * @param {string} path - The path to generate breadcrumbs for\r\n   * @returns {Array<Object>} Array of breadcrumb objects\r\n   */\r\n  generateBreadcrumbs(path) {\r\n    const section = this.getSectionInfo(path);\r\n    if (!section) return [{ id: 'home', title: 'Home', path: '/' }];\r\n    \r\n    const breadcrumbs = [{ id: 'home', title: 'Home', path: '/' }];\r\n    \r\n    if (section.parent) {\r\n      const parent = this.getSectionById(section.parent);\r\n      \r\n      // Check for grandparent\r\n      if (parent.parent) {\r\n        const grandparent = this.getSectionById(parent.parent);\r\n        breadcrumbs.push({ id: grandparent.id, title: grandparent.title, path: grandparent.path });\r\n      }\r\n      \r\n      breadcrumbs.push({ id: parent.id, title: parent.title, path: parent.path });\r\n    }\r\n    \r\n    // Add current section\r\n    if (section.id !== 'home') {\r\n      breadcrumbs.push({ id: section.id, title: section.title, path: section.path });\r\n    }\r\n    \r\n    return breadcrumbs;\r\n  }\r\n  \r\n  /**\r\n   * Get child sections for a given section ID\r\n   * @param {string} sectionId - The ID of the parent section\r\n   * @returns {Array<Object>} Array of child section objects\r\n   */\r\n  getChildSections(sectionId) {\r\n    const section = this.getSectionById(sectionId);\r\n    if (!section || !section.children) return [];\r\n    \r\n    return section.children\r\n      .map(childId => this.getSectionById(childId))\r\n      .filter(Boolean);\r\n  }\r\n  \r\n  /**\r\n   * Get related sections for a given section ID\r\n   * @param {string} sectionId - The ID of the section\r\n   * @returns {Array<Object>} Array of related section objects\r\n   */\r\n  getRelatedSections(sectionId) {\r\n    const section = this.getSectionById(sectionId);\r\n    if (!section || !section.related) return [];\r\n    \r\n    return section.related\r\n      .map(relatedId => this.getSectionById(relatedId))\r\n      .filter(Boolean);\r\n  }\r\n  \r\n  /**\r\n   * Get related content for a specific content item\r\n   * @param {string} contentId - The ID of the content\r\n   * @param {number} limit - Maximum number of related items to return\r\n   * @returns {Array<Object>} Array of related content objects\r\n   */\r\n  getRelatedContent(contentId, limit = 5) {\r\n    const contentItem = CONTENT_RELATIONSHIPS[contentId];\r\n    if (!contentItem || !contentItem.relatedContent) return [];\r\n    \r\n    // Sort by relevance and limit results\r\n    return contentItem.relatedContent\r\n      .sort((a, b) => b.relevance - a.relevance)\r\n      .slice(0, limit)\r\n      .map(related => ({\r\n        ...related,\r\n        ...CONTENT_RELATIONSHIPS[related.id]\r\n      }))\r\n      .filter(Boolean);\r\n  }\r\n  \r\n  /**\r\n   * Get recommended content based on user's viewing history\r\n   * @param {number} limit - Maximum number of recommendations to return\r\n   * @returns {Array<Object>} Array of recommended content objects\r\n   */\r\n  getPersonalizedRecommendations(limit = 5) {\r\n    if (this.contentViewHistory.length === 0) {\r\n      // No history, return generic popular content\r\n      return this.getPopularContent(limit);\r\n    }\r\n    \r\n    // Get categories from recent history (last 10 items)\r\n    const recentCategories = this.contentViewHistory\r\n      .slice(-10)\r\n      .map(item => item.category);\r\n    \r\n    // Count category occurrences\r\n    const categoryCounts = recentCategories.reduce((counts, category) => {\r\n      counts[category] = (counts[category] || 0) + 1;\r\n      return counts;\r\n    }, {});\r\n    \r\n    // Sort categories by count\r\n    const topCategories = Object.keys(categoryCounts)\r\n      .sort((a, b) => categoryCounts[b] - categoryCounts[a])\r\n      .slice(0, 3);\r\n    \r\n    // Get content related to top categories\r\n    const recommendations = Object.keys(CONTENT_RELATIONSHIPS)\r\n      .filter(contentId => {\r\n        const content = CONTENT_RELATIONSHIPS[contentId];\r\n        return topCategories.includes(content.category);\r\n      })\r\n      // Filter out recently viewed content\r\n      .filter(contentId => !this.contentViewHistory\r\n        .slice(-10)\r\n        .some(item => item.contentId === contentId))\r\n      .slice(0, limit)\r\n      .map(contentId => ({\r\n        id: contentId,\r\n        ...CONTENT_RELATIONSHIPS[contentId]\r\n      }));\r\n    \r\n    return recommendations.length > 0 ? recommendations : this.getPopularContent(limit);\r\n  }\r\n  \r\n  /**\r\n   * Get popular content across the platform\r\n   * @param {number} limit - Maximum number of items to return\r\n   * @returns {Array<Object>} Array of popular content objects\r\n   */\r\n  getPopularContent(limit = 5) {\r\n    // In a real implementation, this would query a database or analytics service\r\n    return POPULAR_CONTENT.slice(0, limit);\r\n  }\r\n  \r\n  /**\r\n   * Search for content and sections matching a query\r\n   * @param {string} query - The search query\r\n   * @returns {Object} Object with sections and content arrays\r\n   */\r\n  search(query) {\r\n    if (!query || query.trim() === '') {\r\n      return { sections: [], content: [] };\r\n    }\r\n    \r\n    const lowerQuery = query.toLowerCase().trim();\r\n    \r\n    // Search sections\r\n    const matchingSections = Object.keys(SITE_MAP)\r\n      .filter(key => {\r\n        const section = SITE_MAP[key];\r\n        return section.title.toLowerCase().includes(lowerQuery) ||\r\n               key.toLowerCase().includes(lowerQuery);\r\n      })\r\n      .map(key => ({ id: key, ...SITE_MAP[key] }));\r\n    \r\n    // Search content\r\n    const matchingContent = Object.keys(CONTENT_RELATIONSHIPS)\r\n      .filter(key => {\r\n        const content = CONTENT_RELATIONSHIPS[key];\r\n        return key.toLowerCase().includes(lowerQuery) ||\r\n               content.category.toLowerCase().includes(lowerQuery) ||\r\n               content.type.toLowerCase().includes(lowerQuery);\r\n      })\r\n      .map(key => ({ id: key, ...CONTENT_RELATIONSHIPS[key] }));\r\n    \r\n    return {\r\n      sections: matchingSections,\r\n      content: matchingContent\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Generate navigation links for a specific section\r\n   * @param {string} sectionId - The ID of the section\r\n   * @returns {Object} Navigation links for the section\r\n   */\r\n  getNavigationLinks(sectionId) {\r\n    const section = this.getSectionById(sectionId);\r\n    if (!section) return { parent: null, siblings: [], children: [], related: [] };\r\n    \r\n    // Get parent\r\n    const parent = section.parent ? this.getSectionById(section.parent) : null;\r\n    \r\n    // Get siblings (other sections with the same parent)\r\n    let siblings = [];\r\n    if (parent && parent.children) {\r\n      siblings = parent.children\r\n        .filter(id => id !== sectionId)\r\n        .map(id => this.getSectionById(id))\r\n        .filter(Boolean);\r\n    } else if (sectionId !== 'home') {\r\n      // If no parent (top-level section), siblings are other top-level sections\r\n      siblings = SITE_MAP.home.children\r\n        .filter(id => id !== sectionId)\r\n        .map(id => this.getSectionById(id))\r\n        .filter(Boolean);\r\n    }\r\n    \r\n    // Get children\r\n    const children = section.children ? \r\n      section.children.map(id => this.getSectionById(id)).filter(Boolean) : [];\r\n    \r\n    // Get related sections\r\n    const related = section.related ?\r\n      section.related.map(id => this.getSectionById(id)).filter(Boolean) : [];\r\n    \r\n    return {\r\n      parent: parent ? { id: section.parent, ...parent } : null,\r\n      siblings,\r\n      children,\r\n      related\r\n    };\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nconst navigationService = new NavigationService();\r\n\r\n/**\r\n * React hook for using the navigation service in components\r\n */\r\nexport function useNavigation() {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [currentPath, setCurrentPath] = useState(location.pathname);\r\n  \r\n  useEffect(() => {\r\n    // Update current path when location changes\r\n    setCurrentPath(location.pathname);\r\n    navigationService.currentPath = location.pathname;\r\n  }, [location.pathname]);\r\n  \r\n  useEffect(() => {\r\n    // Subscribe to path changes\r\n    const handlePathChange = (e) => {\r\n      setCurrentPath(e.detail.path);\r\n    };\r\n    \r\n    // Add event listener for path changes\r\n    document.addEventListener('navigation:pathChanged', handlePathChange);\r\n    \r\n    // Cleanup on unmount\r\n    return () => {\r\n      document.removeEventListener('navigation:pathChanged', handlePathChange);\r\n    };\r\n  }, []);\r\n  \r\n  return {\r\n    currentPath,\r\n    navigateTo: (path) => {\r\n      navigate(path);\r\n      navigationService.navigateTo(path);\r\n    },\r\n    getSectionInfo: (path) => navigationService.getSectionInfo(path || currentPath),\r\n    getSectionById: (id) => navigationService.getSectionById(id),\r\n    getBreadcrumbs: (path) => navigationService.generateBreadcrumbs(path || currentPath),\r\n    getChildSections: (sectionId) => navigationService.getChildSections(sectionId),\r\n    getRelatedSections: (sectionId) => navigationService.getRelatedSections(sectionId),\r\n    getRelatedContent: (contentId, limit) => navigationService.getRelatedContent(contentId, limit),\r\n    getRecommendations: (limit) => navigationService.getPersonalizedRecommendations(limit),\r\n    recordContentView: (contentId, contentType, category) => \r\n      navigationService.recordContentView(contentId, contentType, category),\r\n    search: (query) => navigationService.search(query),\r\n    getNavigationLinks: (sectionId) => navigationService.getNavigationLinks(sectionId)\r\n  };\r\n}\r\n\r\nexport default navigationService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}