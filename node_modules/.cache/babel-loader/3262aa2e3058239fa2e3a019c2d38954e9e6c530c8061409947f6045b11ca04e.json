{"ast":null,"code":"// navigationService.js - Cross-linking and navigation system for Groktutor platform\nimport{useState,useEffect}from'react';import{useNavigate,useLocation}from'react-router-dom';/**\n * Site map - defines hierarchical structure and relationships between sections\n */const SITE_MAP={home:{title:\"Home\",path:\"/\",children:[\"skills\",\"live-data\",\"industries\",\"programs\",\"contests\",\"trending\",\"crypto\",\"trading\",\"bugbash\"]},skills:{title:\"Prompt Engineering Skills\",path:\"/skills\",children:[\"reasoning\",\"data-analysis\",\"creative-writing\",\"coding\",\"summarization\",\"personalization\"],related:[\"live-data\",\"programs\"]},\"live-data\":{title:\"Real-Time Data\",path:\"/live-data\",children:[\"reddit-data\",\"twitter-data\",\"github-data\",\"huggingface-data\"],related:[\"trending\",\"skills\"]},industries:{title:\"Industry Applications\",path:\"/industries\",children:[\"healthcare\",\"finance\",\"legal\",\"education\",\"marketing\",\"research\"],related:[\"skills\",\"programs\"]},programs:{title:\"Learning Programs\",path:\"/programs\",children:[\"beginner\",\"intermediate\",\"advanced\",\"certification\"],related:[\"skills\",\"industries\"]},contests:{title:\"Prompt Engineering Contests\",path:\"/contests\",children:[\"active\",\"upcoming\",\"past\",\"leaderboard\"],related:[\"bugbash\",\"trending\"]},trending:{title:\"Trending Techniques\",path:\"/trending\",children:[\"daily\",\"weekly\",\"monthly\"],related:[\"live-data\",\"skills\"]},crypto:{title:\"Crypto Prompt Engineering\",path:\"/crypto\",children:[\"analysis\",\"trading\",\"fundamentals\"],related:[\"trading\",\"skills\"]},trading:{title:\"Trading Strategies\",path:\"/trading\",children:[\"technical\",\"sentiment\",\"fundamental\"],related:[\"crypto\",\"skills\"]},bugbash:{title:\"Bug Bash Challenges\",path:\"/bugbash\",children:[\"current\",\"submissions\",\"rewards\"],related:[\"contests\"]},// Skill subcategories\nreasoning:{title:\"Reasoning & Logic\",path:\"/skills/reasoning\",parent:\"skills\",children:[\"chain-of-thought\",\"tree-of-thought\",\"react\",\"socratic\",\"icl\"],related:[\"data-analysis\",\"coding\"]},\"data-analysis\":{title:\"Data Analysis\",path:\"/skills/data-analysis\",parent:\"skills\",children:[\"data-formatting\",\"exploratory-analysis\",\"data-cleaning\",\"insight-generation\",\"visualization\"],related:[\"reasoning\",\"coding\"]},\"creative-writing\":{title:\"Creative Writing\",path:\"/skills/creative-writing\",parent:\"skills\",children:[\"storytelling\",\"character-development\",\"plot-structure\",\"dialogue\"],related:[\"personalization\",\"summarization\"]},coding:{title:\"Code Generation\",path:\"/skills/coding\",parent:\"skills\",children:[\"python\",\"javascript\",\"sql\",\"algorithms\",\"debugging\"],related:[\"reasoning\",\"data-analysis\"]},summarization:{title:\"Summarization Techniques\",path:\"/skills/summarization\",parent:\"skills\",children:[\"extractive\",\"abstractive\",\"length-control\",\"focus-control\"],related:[\"creative-writing\",\"personalization\"]},personalization:{title:\"Personalization\",path:\"/skills/personalization\",parent:\"skills\",children:[\"tone-adjustment\",\"complexity-control\",\"audience-adaptation\"],related:[\"creative-writing\",\"summarization\"]},// Live data subcategories\n\"reddit-data\":{title:\"Reddit Discussions\",path:\"/live-data/reddit\",parent:\"live-data\",related:[\"twitter-data\",\"trending\"]},\"twitter-data\":{title:\"Twitter Insights\",path:\"/live-data/twitter\",parent:\"live-data\",related:[\"reddit-data\",\"trending\"]},\"github-data\":{title:\"GitHub Projects\",path:\"/live-data/github\",parent:\"live-data\",related:[\"huggingface-data\",\"coding\"]},\"huggingface-data\":{title:\"HuggingFace Models\",path:\"/live-data/huggingface\",parent:\"live-data\",related:[\"github-data\",\"trending\"]},// Reasoning techniques\n\"chain-of-thought\":{title:\"Chain-of-Thought Prompting\",path:\"/skills/reasoning/chain-of-thought\",parent:\"reasoning\",related:[\"tree-of-thought\",\"react\",\"socratic\"]},\"tree-of-thought\":{title:\"Tree-of-Thought Prompting\",path:\"/skills/reasoning/tree-of-thought\",parent:\"reasoning\",related:[\"chain-of-thought\",\"react\"]},\"react\":{title:\"ReAct Framework\",path:\"/skills/reasoning/react\",parent:\"reasoning\",related:[\"chain-of-thought\",\"tree-of-thought\"]},\"socratic\":{title:\"Socratic Method\",path:\"/skills/reasoning/socratic\",parent:\"reasoning\",related:[\"chain-of-thought\",\"icl\"]},\"icl\":{title:\"In-Context Learning\",path:\"/skills/reasoning/icl\",parent:\"reasoning\",related:[\"chain-of-thought\",\"socratic\"]},// Industries\n\"healthcare\":{title:\"Healthcare\",path:\"/industries/healthcare\",parent:\"industries\",related:[\"research\",\"education\"]},\"finance\":{title:\"Finance\",path:\"/industries/finance\",parent:\"industries\",related:[\"trading\",\"crypto\"]},\"legal\":{title:\"Legal\",path:\"/industries/legal\",parent:\"industries\",related:[\"research\",\"summarization\"]},\"education\":{title:\"Education\",path:\"/industries/education\",parent:\"industries\",related:[\"creative-writing\",\"personalization\"]},\"marketing\":{title:\"Marketing\",path:\"/industries/marketing\",parent:\"industries\",related:[\"creative-writing\",\"personalization\"]},\"research\":{title:\"Research\",path:\"/industries/research\",parent:\"industries\",related:[\"data-analysis\",\"summarization\"]}};/**\n * Content-based relationships to dynamically link related content across the platform\n * Maps content IDs to related content by category and relevance score\n */const CONTENT_RELATIONSHIPS={// Content relationships for reasoning techniques\n\"chain-of-thought-guide\":{type:\"tutorial\",category:\"chain-of-thought\",relatedContent:[{id:\"tree-of-thought-comparison\",relevance:0.95},{id:\"reasoning-benchmark-results\",relevance:0.9},{id:\"cot-reddit-discussion\",relevance:0.85},{id:\"step-by-step-prompt-template\",relevance:0.8}]},\"tree-of-thought-comparison\":{type:\"comparison\",category:\"tree-of-thought\",relatedContent:[{id:\"chain-of-thought-guide\",relevance:0.95},{id:\"reasoning-benchmark-results\",relevance:0.9},{id:\"tot-implementation-code\",relevance:0.85}]},\"reasoning-benchmark-results\":{type:\"research\",category:\"reasoning\",relatedContent:[{id:\"chain-of-thought-guide\",relevance:0.9},{id:\"tree-of-thought-comparison\",relevance:0.9},{id:\"react-framework-tutorial\",relevance:0.8}]},\"react-framework-tutorial\":{type:\"tutorial\",category:\"react\",relatedContent:[{id:\"chain-of-thought-guide\",relevance:0.85},{id:\"tree-of-thought-comparison\",relevance:0.85},{id:\"reasoning-benchmark-results\",relevance:0.8},{id:\"tot-implementation-code\",relevance:0.75}]},\"tot-implementation-code\":{type:\"code\",category:\"tree-of-thought\",relatedContent:[{id:\"tree-of-thought-comparison\",relevance:0.95},{id:\"react-framework-tutorial\",relevance:0.8},{id:\"github-prompt-patterns-repo\",relevance:0.75}]},\"step-by-step-prompt-template\":{type:\"template\",category:\"chain-of-thought\",relatedContent:[{id:\"chain-of-thought-guide\",relevance:0.9},{id:\"cot-reddit-discussion\",relevance:0.8},{id:\"exploratory-data-prompt-guide\",relevance:0.7}]},// Content relationships for data analysis\n\"exploratory-data-prompt-guide\":{type:\"tutorial\",category:\"data-analysis\",relatedContent:[{id:\"data-formatting-templates\",relevance:0.9},{id:\"visualization-prompt-techniques\",relevance:0.85},{id:\"github-data-analysis-repo\",relevance:0.8}]},\"data-formatting-templates\":{type:\"template\",category:\"data-formatting\",relatedContent:[{id:\"exploratory-data-prompt-guide\",relevance:0.9},{id:\"visualization-prompt-techniques\",relevance:0.8},{id:\"data-cleaning-techniques\",relevance:0.85}]},\"visualization-prompt-techniques\":{type:\"tutorial\",category:\"visualization\",relatedContent:[{id:\"exploratory-data-prompt-guide\",relevance:0.85},{id:\"data-formatting-templates\",relevance:0.8},{id:\"github-data-analysis-repo\",relevance:0.75}]},\"data-cleaning-techniques\":{type:\"tutorial\",category:\"data-cleaning\",relatedContent:[{id:\"data-formatting-templates\",relevance:0.85},{id:\"exploratory-data-prompt-guide\",relevance:0.8},{id:\"step-by-step-prompt-template\",relevance:0.7}]},// Content relationships for real-time data\n\"cot-reddit-discussion\":{type:\"reddit\",category:\"reddit-data\",relatedContent:[{id:\"chain-of-thought-guide\",relevance:0.85},{id:\"prompt-engineer-twitter-thread\",relevance:0.75},{id:\"reasoning-benchmark-results\",relevance:0.7}]},\"prompt-engineer-twitter-thread\":{type:\"twitter\",category:\"twitter-data\",relatedContent:[{id:\"github-prompt-patterns-repo\",relevance:0.8},{id:\"cot-reddit-discussion\",relevance:0.75}]},\"github-prompt-patterns-repo\":{type:\"github\",category:\"github-data\",relatedContent:[{id:\"prompt-engineer-twitter-thread\",relevance:0.8},{id:\"prompt-tuning-toolkit-model\",relevance:0.85},{id:\"tot-implementation-code\",relevance:0.7}]},\"prompt-tuning-toolkit-model\":{type:\"huggingface\",category:\"huggingface-data\",relatedContent:[{id:\"github-prompt-patterns-repo\",relevance:0.85},{id:\"llama-model-card\",relevance:0.75}]},\"llama-model-card\":{type:\"huggingface\",category:\"huggingface-data\",relatedContent:[{id:\"prompt-tuning-toolkit-model\",relevance:0.75},{id:\"github-prompt-patterns-repo\",relevance:0.7},{id:\"github-data-analysis-repo\",relevance:0.65}]},\"github-data-analysis-repo\":{type:\"github\",category:\"github-data\",relatedContent:[{id:\"visualization-prompt-techniques\",relevance:0.8},{id:\"exploratory-data-prompt-guide\",relevance:0.75},{id:\"llama-model-card\",relevance:0.65}]}};/**\n * Popular Content - Hard-coded for demo purposes\n */const POPULAR_CONTENT=[{id:\"chain-of-thought-guide\",popularity:95,...CONTENT_RELATIONSHIPS[\"chain-of-thought-guide\"]},{id:\"tree-of-thought-comparison\",popularity:85,...CONTENT_RELATIONSHIPS[\"tree-of-thought-comparison\"]},{id:\"cot-reddit-discussion\",popularity:80,...CONTENT_RELATIONSHIPS[\"cot-reddit-discussion\"]},{id:\"github-prompt-patterns-repo\",popularity:75,...CONTENT_RELATIONSHIPS[\"github-prompt-patterns-repo\"]},{id:\"exploratory-data-prompt-guide\",popularity:70,...CONTENT_RELATIONSHIPS[\"exploratory-data-prompt-guide\"]}];/**\n * Navigation Service Implementation\n */class NavigationService{constructor(){this.currentPath=\"/\";this.history=[\"/\"];this.contentViewHistory=[];this.eventListeners={};}/**\n   * Navigate to a specific path\n   * @param {string} path - The path to navigate to\n   * @param {boolean} addToHistory - Whether to add to browser history\n   */navigateTo(path){let addToHistory=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;this.currentPath=path;this.history.push(path);this.notifyPathChange(path);return this.getSectionInfo(path);}/**\n   * Register event listener\n   * @param {string} event - Event name\n   * @param {Function} callback - Event callback\n   */addEventListener(event,callback){if(!this.eventListeners[event]){this.eventListeners[event]=[];}this.eventListeners[event].push(callback);// Return unsubscribe function\nreturn()=>{this.eventListeners[event]=this.eventListeners[event].filter(cb=>cb!==callback);};}/**\n   * Notify event listeners\n   * @param {string} event - Event name\n   * @param {*} data - Event data\n   */notifyListeners(event,data){if(this.eventListeners[event]){this.eventListeners[event].forEach(callback=>{callback(data);});}}/**\n   * Notify subscribers that the path has changed\n   * @param {string} path - The new path\n   */notifyPathChange(path){this.notifyListeners('pathChanged',{path});// Dispatch custom event for React components\nconst event=new CustomEvent('navigation:pathChanged',{detail:{path}});document.dispatchEvent(event);// Track page view for analytics\nthis.trackPageView(path);}/**\n   * Track page view for analytics\n   * @param {string} path - The path being viewed\n   */trackPageView(path){// In a real implementation, this would send data to an analytics service\nconsole.log(`Analytics: Page view tracked for ${path}`);}/**\n   * Record content view history for personalization\n   * @param {string} contentId - The ID of the viewed content\n   * @param {string} contentType - The type of content viewed\n   * @param {string} category - The category of the content\n   */recordContentView(contentId,contentType,category){this.contentViewHistory.push({contentId,contentType,category,timestamp:new Date().toISOString()});// Limit history length to prevent memory issues\nif(this.contentViewHistory.length>100){this.contentViewHistory.shift();}// Notify event listeners\nthis.notifyListeners('contentViewed',{contentId,contentType,category});}/**\n   * Get information about a section by its path\n   * @param {string} path - The path of the section\n   * @returns {Object|null} The section information or null if not found\n   */getSectionInfo(path){// Find the section with the matching path\nconst key=Object.keys(SITE_MAP).find(key=>SITE_MAP[key].path===path);return key?{id:key,...SITE_MAP[key]}:null;}/**\n   * Get information about a section by its ID\n   * @param {string} id - The ID of the section\n   * @returns {Object|null} The section information or null if not found\n   */getSectionById(id){return SITE_MAP[id]?{id,...SITE_MAP[id]}:null;}/**\n   * Generate breadcrumbs for a given path\n   * @param {string} path - The path to generate breadcrumbs for\n   * @returns {Array<Object>} Array of breadcrumb objects\n   */generateBreadcrumbs(path){const section=this.getSectionInfo(path);if(!section)return[{id:'home',title:'Home',path:'/'}];const breadcrumbs=[{id:'home',title:'Home',path:'/'}];if(section.parent){const parent=this.getSectionById(section.parent);// Check for grandparent\nif(parent.parent){const grandparent=this.getSectionById(parent.parent);breadcrumbs.push({id:grandparent.id,title:grandparent.title,path:grandparent.path});}breadcrumbs.push({id:parent.id,title:parent.title,path:parent.path});}// Add current section\nif(section.id!=='home'){breadcrumbs.push({id:section.id,title:section.title,path:section.path});}return breadcrumbs;}/**\n   * Get child sections for a given section ID\n   * @param {string} sectionId - The ID of the parent section\n   * @returns {Array<Object>} Array of child section objects\n   */getChildSections(sectionId){const section=this.getSectionById(sectionId);if(!section||!section.children)return[];return section.children.map(childId=>this.getSectionById(childId)).filter(Boolean);}/**\n   * Get related sections for a given section ID\n   * @param {string} sectionId - The ID of the section\n   * @returns {Array<Object>} Array of related section objects\n   */getRelatedSections(sectionId){const section=this.getSectionById(sectionId);if(!section||!section.related)return[];return section.related.map(relatedId=>this.getSectionById(relatedId)).filter(Boolean);}/**\n   * Get related content for a specific content item\n   * @param {string} contentId - The ID of the content\n   * @param {number} limit - Maximum number of related items to return\n   * @returns {Array<Object>} Array of related content objects\n   */getRelatedContent(contentId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;const contentItem=CONTENT_RELATIONSHIPS[contentId];if(!contentItem||!contentItem.relatedContent)return[];// Sort by relevance and limit results\nreturn contentItem.relatedContent.sort((a,b)=>b.relevance-a.relevance).slice(0,limit).map(related=>({...related,...CONTENT_RELATIONSHIPS[related.id]})).filter(Boolean);}/**\n   * Get recommended content based on user's viewing history\n   * @param {number} limit - Maximum number of recommendations to return\n   * @returns {Array<Object>} Array of recommended content objects\n   */getPersonalizedRecommendations(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5;if(this.contentViewHistory.length===0){// No history, return generic popular content\nreturn this.getPopularContent(limit);}// Get categories from recent history (last 10 items)\nconst recentCategories=this.contentViewHistory.slice(-10).map(item=>item.category);// Count category occurrences\nconst categoryCounts=recentCategories.reduce((counts,category)=>{counts[category]=(counts[category]||0)+1;return counts;},{});// Sort categories by count\nconst topCategories=Object.keys(categoryCounts).sort((a,b)=>categoryCounts[b]-categoryCounts[a]).slice(0,3);// Get content related to top categories\nconst recommendations=Object.keys(CONTENT_RELATIONSHIPS).filter(contentId=>{const content=CONTENT_RELATIONSHIPS[contentId];return topCategories.includes(content.category);})// Filter out recently viewed content\n.filter(contentId=>!this.contentViewHistory.slice(-10).some(item=>item.contentId===contentId)).slice(0,limit).map(contentId=>({id:contentId,...CONTENT_RELATIONSHIPS[contentId]}));return recommendations.length>0?recommendations:this.getPopularContent(limit);}/**\n   * Get popular content across the platform\n   * @param {number} limit - Maximum number of items to return\n   * @returns {Array<Object>} Array of popular content objects\n   */getPopularContent(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5;// In a real implementation, this would query a database or analytics service\nreturn POPULAR_CONTENT.slice(0,limit);}/**\n   * Search for content and sections matching a query\n   * @param {string} query - The search query\n   * @returns {Object} Object with sections and content arrays\n   */search(query){if(!query||query.trim()===''){return{sections:[],content:[]};}const lowerQuery=query.toLowerCase().trim();// Search sections\nconst matchingSections=Object.keys(SITE_MAP).filter(key=>{const section=SITE_MAP[key];return section.title.toLowerCase().includes(lowerQuery)||key.toLowerCase().includes(lowerQuery);}).map(key=>({id:key,...SITE_MAP[key]}));// Search content\nconst matchingContent=Object.keys(CONTENT_RELATIONSHIPS).filter(key=>{const content=CONTENT_RELATIONSHIPS[key];return key.toLowerCase().includes(lowerQuery)||content.category.toLowerCase().includes(lowerQuery)||content.type.toLowerCase().includes(lowerQuery);}).map(key=>({id:key,...CONTENT_RELATIONSHIPS[key]}));return{sections:matchingSections,content:matchingContent};}/**\n   * Generate navigation links for a specific section\n   * @param {string} sectionId - The ID of the section\n   * @returns {Object} Navigation links for the section\n   */getNavigationLinks(sectionId){const section=this.getSectionById(sectionId);if(!section)return{parent:null,siblings:[],children:[],related:[]};// Get parent\nconst parent=section.parent?this.getSectionById(section.parent):null;// Get siblings (other sections with the same parent)\nlet siblings=[];if(parent&&parent.children){siblings=parent.children.filter(id=>id!==sectionId).map(id=>this.getSectionById(id)).filter(Boolean);}else if(sectionId!=='home'){// If no parent (top-level section), siblings are other top-level sections\nsiblings=SITE_MAP.home.children.filter(id=>id!==sectionId).map(id=>this.getSectionById(id)).filter(Boolean);}// Get children\nconst children=section.children?section.children.map(id=>this.getSectionById(id)).filter(Boolean):[];// Get related sections\nconst related=section.related?section.related.map(id=>this.getSectionById(id)).filter(Boolean):[];return{parent:parent?{id:section.parent,...parent}:null,siblings,children,related};}}// Create a singleton instance\nconst navigationService=new NavigationService();/**\n * React hook for using the navigation service in components\n */export function useNavigation(){const navigate=useNavigate();const location=useLocation();const[currentPath,setCurrentPath]=useState(location.pathname);useEffect(()=>{// Update current path when location changes\nsetCurrentPath(location.pathname);navigationService.currentPath=location.pathname;},[location.pathname]);useEffect(()=>{// Subscribe to path changes\nconst handlePathChange=e=>{setCurrentPath(e.detail.path);};// Add event listener for path changes\ndocument.addEventListener('navigation:pathChanged',handlePathChange);// Cleanup on unmount\nreturn()=>{document.removeEventListener('navigation:pathChanged',handlePathChange);};},[]);return{currentPath,navigateTo:path=>{navigate(path);navigationService.navigateTo(path);},getSectionInfo:path=>navigationService.getSectionInfo(path||currentPath),getSectionById:id=>navigationService.getSectionById(id),getBreadcrumbs:path=>navigationService.generateBreadcrumbs(path||currentPath),getChildSections:sectionId=>navigationService.getChildSections(sectionId),getRelatedSections:sectionId=>navigationService.getRelatedSections(sectionId),getRelatedContent:(contentId,limit)=>navigationService.getRelatedContent(contentId,limit),getRecommendations:limit=>navigationService.getPersonalizedRecommendations(limit),recordContentView:(contentId,contentType,category)=>navigationService.recordContentView(contentId,contentType,category),search:query=>navigationService.search(query),getNavigationLinks:sectionId=>navigationService.getNavigationLinks(sectionId)};}export default navigationService;","map":{"version":3,"names":["useState","useEffect","useNavigate","useLocation","SITE_MAP","home","title","path","children","skills","related","industries","programs","contests","trending","crypto","trading","bugbash","reasoning","parent","coding","summarization","personalization","CONTENT_RELATIONSHIPS","type","category","relatedContent","id","relevance","POPULAR_CONTENT","popularity","NavigationService","constructor","currentPath","history","contentViewHistory","eventListeners","navigateTo","addToHistory","arguments","length","undefined","push","notifyPathChange","getSectionInfo","addEventListener","event","callback","filter","cb","notifyListeners","data","forEach","CustomEvent","detail","document","dispatchEvent","trackPageView","console","log","recordContentView","contentId","contentType","timestamp","Date","toISOString","shift","key","Object","keys","find","getSectionById","generateBreadcrumbs","section","breadcrumbs","grandparent","getChildSections","sectionId","map","childId","Boolean","getRelatedSections","relatedId","getRelatedContent","limit","contentItem","sort","a","b","slice","getPersonalizedRecommendations","getPopularContent","recentCategories","item","categoryCounts","reduce","counts","topCategories","recommendations","content","includes","some","search","query","trim","sections","lowerQuery","toLowerCase","matchingSections","matchingContent","getNavigationLinks","siblings","navigationService","useNavigation","navigate","location","setCurrentPath","pathname","handlePathChange","e","removeEventListener","getBreadcrumbs","getRecommendations"],"sources":["/home/vdfguard/groktutur/claude_v1/groktutor-app/src/services/navigationService.js"],"sourcesContent":["// navigationService.js - Cross-linking and navigation system for Groktutor platform\nimport { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\n/**\n * Site map - defines hierarchical structure and relationships between sections\n */\nconst SITE_MAP = {\n  home: {\n    title: \"Home\",\n    path: \"/\",\n    children: [\"skills\", \"live-data\", \"industries\", \"programs\", \"contests\", \"trending\", \"crypto\", \"trading\", \"bugbash\"]\n  },\n  skills: {\n    title: \"Prompt Engineering Skills\",\n    path: \"/skills\",\n    children: [\"reasoning\", \"data-analysis\", \"creative-writing\", \"coding\", \"summarization\", \"personalization\"],\n    related: [\"live-data\", \"programs\"]\n  },\n  \"live-data\": {\n    title: \"Real-Time Data\",\n    path: \"/live-data\",\n    children: [\"reddit-data\", \"twitter-data\", \"github-data\", \"huggingface-data\"],\n    related: [\"trending\", \"skills\"]\n  },\n  industries: {\n    title: \"Industry Applications\",\n    path: \"/industries\",\n    children: [\"healthcare\", \"finance\", \"legal\", \"education\", \"marketing\", \"research\"],\n    related: [\"skills\", \"programs\"]\n  },\n  programs: {\n    title: \"Learning Programs\",\n    path: \"/programs\",\n    children: [\"beginner\", \"intermediate\", \"advanced\", \"certification\"],\n    related: [\"skills\", \"industries\"]\n  },\n  contests: {\n    title: \"Prompt Engineering Contests\",\n    path: \"/contests\",\n    children: [\"active\", \"upcoming\", \"past\", \"leaderboard\"],\n    related: [\"bugbash\", \"trending\"]\n  },\n  trending: {\n    title: \"Trending Techniques\",\n    path: \"/trending\",\n    children: [\"daily\", \"weekly\", \"monthly\"],\n    related: [\"live-data\", \"skills\"]\n  },\n  crypto: {\n    title: \"Crypto Prompt Engineering\",\n    path: \"/crypto\",\n    children: [\"analysis\", \"trading\", \"fundamentals\"],\n    related: [\"trading\", \"skills\"]\n  },\n  trading: {\n    title: \"Trading Strategies\",\n    path: \"/trading\",\n    children: [\"technical\", \"sentiment\", \"fundamental\"],\n    related: [\"crypto\", \"skills\"]\n  },\n  bugbash: {\n    title: \"Bug Bash Challenges\",\n    path: \"/bugbash\",\n    children: [\"current\", \"submissions\", \"rewards\"],\n    related: [\"contests\"]\n  },\n  // Skill subcategories\n  reasoning: {\n    title: \"Reasoning & Logic\",\n    path: \"/skills/reasoning\",\n    parent: \"skills\",\n    children: [\"chain-of-thought\", \"tree-of-thought\", \"react\", \"socratic\", \"icl\"],\n    related: [\"data-analysis\", \"coding\"]\n  },\n  \"data-analysis\": {\n    title: \"Data Analysis\",\n    path: \"/skills/data-analysis\",\n    parent: \"skills\",\n    children: [\"data-formatting\", \"exploratory-analysis\", \"data-cleaning\", \"insight-generation\", \"visualization\"],\n    related: [\"reasoning\", \"coding\"]\n  },\n  \"creative-writing\": {\n    title: \"Creative Writing\",\n    path: \"/skills/creative-writing\",\n    parent: \"skills\",\n    children: [\"storytelling\", \"character-development\", \"plot-structure\", \"dialogue\"],\n    related: [\"personalization\", \"summarization\"]\n  },\n  coding: {\n    title: \"Code Generation\",\n    path: \"/skills/coding\",\n    parent: \"skills\",\n    children: [\"python\", \"javascript\", \"sql\", \"algorithms\", \"debugging\"],\n    related: [\"reasoning\", \"data-analysis\"]\n  },\n  summarization: {\n    title: \"Summarization Techniques\",\n    path: \"/skills/summarization\",\n    parent: \"skills\",\n    children: [\"extractive\", \"abstractive\", \"length-control\", \"focus-control\"],\n    related: [\"creative-writing\", \"personalization\"]\n  },\n  personalization: {\n    title: \"Personalization\",\n    path: \"/skills/personalization\",\n    parent: \"skills\",\n    children: [\"tone-adjustment\", \"complexity-control\", \"audience-adaptation\"],\n    related: [\"creative-writing\", \"summarization\"]\n  },\n  // Live data subcategories\n  \"reddit-data\": {\n    title: \"Reddit Discussions\",\n    path: \"/live-data/reddit\",\n    parent: \"live-data\",\n    related: [\"twitter-data\", \"trending\"]\n  },\n  \"twitter-data\": {\n    title: \"Twitter Insights\",\n    path: \"/live-data/twitter\",\n    parent: \"live-data\",\n    related: [\"reddit-data\", \"trending\"]\n  },\n  \"github-data\": {\n    title: \"GitHub Projects\",\n    path: \"/live-data/github\",\n    parent: \"live-data\",\n    related: [\"huggingface-data\", \"coding\"]\n  },\n  \"huggingface-data\": {\n    title: \"HuggingFace Models\",\n    path: \"/live-data/huggingface\",\n    parent: \"live-data\",\n    related: [\"github-data\", \"trending\"]\n  },\n  // Reasoning techniques\n  \"chain-of-thought\": {\n    title: \"Chain-of-Thought Prompting\",\n    path: \"/skills/reasoning/chain-of-thought\",\n    parent: \"reasoning\",\n    related: [\"tree-of-thought\", \"react\", \"socratic\"]\n  },\n  \"tree-of-thought\": {\n    title: \"Tree-of-Thought Prompting\",\n    path: \"/skills/reasoning/tree-of-thought\",\n    parent: \"reasoning\",\n    related: [\"chain-of-thought\", \"react\"]\n  },\n  \"react\": {\n    title: \"ReAct Framework\",\n    path: \"/skills/reasoning/react\",\n    parent: \"reasoning\",\n    related: [\"chain-of-thought\", \"tree-of-thought\"]\n  },\n  \"socratic\": {\n    title: \"Socratic Method\",\n    path: \"/skills/reasoning/socratic\",\n    parent: \"reasoning\",\n    related: [\"chain-of-thought\", \"icl\"]\n  },\n  \"icl\": {\n    title: \"In-Context Learning\",\n    path: \"/skills/reasoning/icl\",\n    parent: \"reasoning\",\n    related: [\"chain-of-thought\", \"socratic\"]\n  },\n  // Industries\n  \"healthcare\": {\n    title: \"Healthcare\",\n    path: \"/industries/healthcare\",\n    parent: \"industries\",\n    related: [\"research\", \"education\"]\n  },\n  \"finance\": {\n    title: \"Finance\",\n    path: \"/industries/finance\",\n    parent: \"industries\",\n    related: [\"trading\", \"crypto\"]\n  },\n  \"legal\": {\n    title: \"Legal\",\n    path: \"/industries/legal\",\n    parent: \"industries\",\n    related: [\"research\", \"summarization\"]\n  },\n  \"education\": {\n    title: \"Education\",\n    path: \"/industries/education\",\n    parent: \"industries\",\n    related: [\"creative-writing\", \"personalization\"]\n  },\n  \"marketing\": {\n    title: \"Marketing\",\n    path: \"/industries/marketing\",\n    parent: \"industries\",\n    related: [\"creative-writing\", \"personalization\"]\n  },\n  \"research\": {\n    title: \"Research\",\n    path: \"/industries/research\",\n    parent: \"industries\",\n    related: [\"data-analysis\", \"summarization\"]\n  }\n};\n\n/**\n * Content-based relationships to dynamically link related content across the platform\n * Maps content IDs to related content by category and relevance score\n */\nconst CONTENT_RELATIONSHIPS = {\n  // Content relationships for reasoning techniques\n  \"chain-of-thought-guide\": {\n    type: \"tutorial\",\n    category: \"chain-of-thought\",\n    relatedContent: [\n      { id: \"tree-of-thought-comparison\", relevance: 0.95 },\n      { id: \"reasoning-benchmark-results\", relevance: 0.9 },\n      { id: \"cot-reddit-discussion\", relevance: 0.85 },\n      { id: \"step-by-step-prompt-template\", relevance: 0.8 }\n    ]\n  },\n  \"tree-of-thought-comparison\": {\n    type: \"comparison\",\n    category: \"tree-of-thought\",\n    relatedContent: [\n      { id: \"chain-of-thought-guide\", relevance: 0.95 },\n      { id: \"reasoning-benchmark-results\", relevance: 0.9 },\n      { id: \"tot-implementation-code\", relevance: 0.85 }\n    ]\n  },\n  \"reasoning-benchmark-results\": {\n    type: \"research\",\n    category: \"reasoning\",\n    relatedContent: [\n      { id: \"chain-of-thought-guide\", relevance: 0.9 },\n      { id: \"tree-of-thought-comparison\", relevance: 0.9 },\n      { id: \"react-framework-tutorial\", relevance: 0.8 }\n    ]\n  },\n  \"react-framework-tutorial\": {\n    type: \"tutorial\",\n    category: \"react\",\n    relatedContent: [\n      { id: \"chain-of-thought-guide\", relevance: 0.85 },\n      { id: \"tree-of-thought-comparison\", relevance: 0.85 },\n      { id: \"reasoning-benchmark-results\", relevance: 0.8 },\n      { id: \"tot-implementation-code\", relevance: 0.75 }\n    ]\n  },\n  \"tot-implementation-code\": {\n    type: \"code\",\n    category: \"tree-of-thought\",\n    relatedContent: [\n      { id: \"tree-of-thought-comparison\", relevance: 0.95 },\n      { id: \"react-framework-tutorial\", relevance: 0.8 },\n      { id: \"github-prompt-patterns-repo\", relevance: 0.75 }\n    ]\n  },\n  \"step-by-step-prompt-template\": {\n    type: \"template\",\n    category: \"chain-of-thought\",\n    relatedContent: [\n      { id: \"chain-of-thought-guide\", relevance: 0.9 },\n      { id: \"cot-reddit-discussion\", relevance: 0.8 },\n      { id: \"exploratory-data-prompt-guide\", relevance: 0.7 }\n    ]\n  },\n  \n  // Content relationships for data analysis\n  \"exploratory-data-prompt-guide\": {\n    type: \"tutorial\",\n    category: \"data-analysis\",\n    relatedContent: [\n      { id: \"data-formatting-templates\", relevance: 0.9 },\n      { id: \"visualization-prompt-techniques\", relevance: 0.85 },\n      { id: \"github-data-analysis-repo\", relevance: 0.8 }\n    ]\n  },\n  \"data-formatting-templates\": {\n    type: \"template\",\n    category: \"data-formatting\",\n    relatedContent: [\n      { id: \"exploratory-data-prompt-guide\", relevance: 0.9 },\n      { id: \"visualization-prompt-techniques\", relevance: 0.8 },\n      { id: \"data-cleaning-techniques\", relevance: 0.85 }\n    ]\n  },\n  \"visualization-prompt-techniques\": {\n    type: \"tutorial\",\n    category: \"visualization\",\n    relatedContent: [\n      { id: \"exploratory-data-prompt-guide\", relevance: 0.85 },\n      { id: \"data-formatting-templates\", relevance: 0.8 },\n      { id: \"github-data-analysis-repo\", relevance: 0.75 }\n    ]\n  },\n  \"data-cleaning-techniques\": {\n    type: \"tutorial\",\n    category: \"data-cleaning\",\n    relatedContent: [\n      { id: \"data-formatting-templates\", relevance: 0.85 },\n      { id: \"exploratory-data-prompt-guide\", relevance: 0.8 },\n      { id: \"step-by-step-prompt-template\", relevance: 0.7 }\n    ]\n  },\n  \n  // Content relationships for real-time data\n  \"cot-reddit-discussion\": {\n    type: \"reddit\",\n    category: \"reddit-data\",\n    relatedContent: [\n      { id: \"chain-of-thought-guide\", relevance: 0.85 },\n      { id: \"prompt-engineer-twitter-thread\", relevance: 0.75 },\n      { id: \"reasoning-benchmark-results\", relevance: 0.7 }\n    ]\n  },\n  \"prompt-engineer-twitter-thread\": {\n    type: \"twitter\",\n    category: \"twitter-data\",\n    relatedContent: [\n      { id: \"github-prompt-patterns-repo\", relevance: 0.8 },\n      { id: \"cot-reddit-discussion\", relevance: 0.75 }\n    ]\n  },\n  \"github-prompt-patterns-repo\": {\n    type: \"github\",\n    category: \"github-data\",\n    relatedContent: [\n      { id: \"prompt-engineer-twitter-thread\", relevance: 0.8 },\n      { id: \"prompt-tuning-toolkit-model\", relevance: 0.85 },\n      { id: \"tot-implementation-code\", relevance: 0.7 }\n    ]\n  },\n  \"prompt-tuning-toolkit-model\": {\n    type: \"huggingface\",\n    category: \"huggingface-data\",\n    relatedContent: [\n      { id: \"github-prompt-patterns-repo\", relevance: 0.85 },\n      { id: \"llama-model-card\", relevance: 0.75 }\n    ]\n  },\n  \"llama-model-card\": {\n    type: \"huggingface\",\n    category: \"huggingface-data\",\n    relatedContent: [\n      { id: \"prompt-tuning-toolkit-model\", relevance: 0.75 },\n      { id: \"github-prompt-patterns-repo\", relevance: 0.7 },\n      { id: \"github-data-analysis-repo\", relevance: 0.65 }\n    ]\n  },\n  \"github-data-analysis-repo\": {\n    type: \"github\",\n    category: \"github-data\",\n    relatedContent: [\n      { id: \"visualization-prompt-techniques\", relevance: 0.8 },\n      { id: \"exploratory-data-prompt-guide\", relevance: 0.75 },\n      { id: \"llama-model-card\", relevance: 0.65 }\n    ]\n  }\n};\n\n/**\n * Popular Content - Hard-coded for demo purposes\n */\nconst POPULAR_CONTENT = [\n  { id: \"chain-of-thought-guide\", popularity: 95, ...CONTENT_RELATIONSHIPS[\"chain-of-thought-guide\"] },\n  { id: \"tree-of-thought-comparison\", popularity: 85, ...CONTENT_RELATIONSHIPS[\"tree-of-thought-comparison\"] },\n  { id: \"cot-reddit-discussion\", popularity: 80, ...CONTENT_RELATIONSHIPS[\"cot-reddit-discussion\"] },\n  { id: \"github-prompt-patterns-repo\", popularity: 75, ...CONTENT_RELATIONSHIPS[\"github-prompt-patterns-repo\"] },\n  { id: \"exploratory-data-prompt-guide\", popularity: 70, ...CONTENT_RELATIONSHIPS[\"exploratory-data-prompt-guide\"] },\n];\n\n/**\n * Navigation Service Implementation\n */\nclass NavigationService {\n  constructor() {\n    this.currentPath = \"/\";\n    this.history = [\"/\"];\n    this.contentViewHistory = [];\n    this.eventListeners = {};\n  }\n  \n  /**\n   * Navigate to a specific path\n   * @param {string} path - The path to navigate to\n   * @param {boolean} addToHistory - Whether to add to browser history\n   */\n  navigateTo(path, addToHistory = true) {\n    this.currentPath = path;\n    this.history.push(path);\n    this.notifyPathChange(path);\n    return this.getSectionInfo(path);\n  }\n  \n  /**\n   * Register event listener\n   * @param {string} event - Event name\n   * @param {Function} callback - Event callback\n   */\n  addEventListener(event, callback) {\n    if (!this.eventListeners[event]) {\n      this.eventListeners[event] = [];\n    }\n    this.eventListeners[event].push(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      this.eventListeners[event] = this.eventListeners[event].filter(cb => cb !== callback);\n    };\n  }\n  \n  /**\n   * Notify event listeners\n   * @param {string} event - Event name\n   * @param {*} data - Event data\n   */\n  notifyListeners(event, data) {\n    if (this.eventListeners[event]) {\n      this.eventListeners[event].forEach(callback => {\n        callback(data);\n      });\n    }\n  }\n  \n  /**\n   * Notify subscribers that the path has changed\n   * @param {string} path - The new path\n   */\n  notifyPathChange(path) {\n    this.notifyListeners('pathChanged', { path });\n    \n    // Dispatch custom event for React components\n    const event = new CustomEvent('navigation:pathChanged', { detail: { path } });\n    document.dispatchEvent(event);\n    \n    // Track page view for analytics\n    this.trackPageView(path);\n  }\n  \n  /**\n   * Track page view for analytics\n   * @param {string} path - The path being viewed\n   */\n  trackPageView(path) {\n    // In a real implementation, this would send data to an analytics service\n    console.log(`Analytics: Page view tracked for ${path}`);\n  }\n  \n  /**\n   * Record content view history for personalization\n   * @param {string} contentId - The ID of the viewed content\n   * @param {string} contentType - The type of content viewed\n   * @param {string} category - The category of the content\n   */\n  recordContentView(contentId, contentType, category) {\n    this.contentViewHistory.push({\n      contentId,\n      contentType,\n      category,\n      timestamp: new Date().toISOString()\n    });\n    \n    // Limit history length to prevent memory issues\n    if (this.contentViewHistory.length > 100) {\n      this.contentViewHistory.shift();\n    }\n    \n    // Notify event listeners\n    this.notifyListeners('contentViewed', { contentId, contentType, category });\n  }\n  \n  /**\n   * Get information about a section by its path\n   * @param {string} path - The path of the section\n   * @returns {Object|null} The section information or null if not found\n   */\n  getSectionInfo(path) {\n    // Find the section with the matching path\n    const key = Object.keys(SITE_MAP).find(key => SITE_MAP[key].path === path);\n    return key ? { id: key, ...SITE_MAP[key] } : null;\n  }\n  \n  /**\n   * Get information about a section by its ID\n   * @param {string} id - The ID of the section\n   * @returns {Object|null} The section information or null if not found\n   */\n  getSectionById(id) {\n    return SITE_MAP[id] ? { id, ...SITE_MAP[id] } : null;\n  }\n  \n  /**\n   * Generate breadcrumbs for a given path\n   * @param {string} path - The path to generate breadcrumbs for\n   * @returns {Array<Object>} Array of breadcrumb objects\n   */\n  generateBreadcrumbs(path) {\n    const section = this.getSectionInfo(path);\n    if (!section) return [{ id: 'home', title: 'Home', path: '/' }];\n    \n    const breadcrumbs = [{ id: 'home', title: 'Home', path: '/' }];\n    \n    if (section.parent) {\n      const parent = this.getSectionById(section.parent);\n      \n      // Check for grandparent\n      if (parent.parent) {\n        const grandparent = this.getSectionById(parent.parent);\n        breadcrumbs.push({ id: grandparent.id, title: grandparent.title, path: grandparent.path });\n      }\n      \n      breadcrumbs.push({ id: parent.id, title: parent.title, path: parent.path });\n    }\n    \n    // Add current section\n    if (section.id !== 'home') {\n      breadcrumbs.push({ id: section.id, title: section.title, path: section.path });\n    }\n    \n    return breadcrumbs;\n  }\n  \n  /**\n   * Get child sections for a given section ID\n   * @param {string} sectionId - The ID of the parent section\n   * @returns {Array<Object>} Array of child section objects\n   */\n  getChildSections(sectionId) {\n    const section = this.getSectionById(sectionId);\n    if (!section || !section.children) return [];\n    \n    return section.children\n      .map(childId => this.getSectionById(childId))\n      .filter(Boolean);\n  }\n  \n  /**\n   * Get related sections for a given section ID\n   * @param {string} sectionId - The ID of the section\n   * @returns {Array<Object>} Array of related section objects\n   */\n  getRelatedSections(sectionId) {\n    const section = this.getSectionById(sectionId);\n    if (!section || !section.related) return [];\n    \n    return section.related\n      .map(relatedId => this.getSectionById(relatedId))\n      .filter(Boolean);\n  }\n  \n  /**\n   * Get related content for a specific content item\n   * @param {string} contentId - The ID of the content\n   * @param {number} limit - Maximum number of related items to return\n   * @returns {Array<Object>} Array of related content objects\n   */\n  getRelatedContent(contentId, limit = 5) {\n    const contentItem = CONTENT_RELATIONSHIPS[contentId];\n    if (!contentItem || !contentItem.relatedContent) return [];\n    \n    // Sort by relevance and limit results\n    return contentItem.relatedContent\n      .sort((a, b) => b.relevance - a.relevance)\n      .slice(0, limit)\n      .map(related => ({\n        ...related,\n        ...CONTENT_RELATIONSHIPS[related.id]\n      }))\n      .filter(Boolean);\n  }\n  \n  /**\n   * Get recommended content based on user's viewing history\n   * @param {number} limit - Maximum number of recommendations to return\n   * @returns {Array<Object>} Array of recommended content objects\n   */\n  getPersonalizedRecommendations(limit = 5) {\n    if (this.contentViewHistory.length === 0) {\n      // No history, return generic popular content\n      return this.getPopularContent(limit);\n    }\n    \n    // Get categories from recent history (last 10 items)\n    const recentCategories = this.contentViewHistory\n      .slice(-10)\n      .map(item => item.category);\n    \n    // Count category occurrences\n    const categoryCounts = recentCategories.reduce((counts, category) => {\n      counts[category] = (counts[category] || 0) + 1;\n      return counts;\n    }, {});\n    \n    // Sort categories by count\n    const topCategories = Object.keys(categoryCounts)\n      .sort((a, b) => categoryCounts[b] - categoryCounts[a])\n      .slice(0, 3);\n    \n    // Get content related to top categories\n    const recommendations = Object.keys(CONTENT_RELATIONSHIPS)\n      .filter(contentId => {\n        const content = CONTENT_RELATIONSHIPS[contentId];\n        return topCategories.includes(content.category);\n      })\n      // Filter out recently viewed content\n      .filter(contentId => !this.contentViewHistory\n        .slice(-10)\n        .some(item => item.contentId === contentId))\n      .slice(0, limit)\n      .map(contentId => ({\n        id: contentId,\n        ...CONTENT_RELATIONSHIPS[contentId]\n      }));\n    \n    return recommendations.length > 0 ? recommendations : this.getPopularContent(limit);\n  }\n  \n  /**\n   * Get popular content across the platform\n   * @param {number} limit - Maximum number of items to return\n   * @returns {Array<Object>} Array of popular content objects\n   */\n  getPopularContent(limit = 5) {\n    // In a real implementation, this would query a database or analytics service\n    return POPULAR_CONTENT.slice(0, limit);\n  }\n  \n  /**\n   * Search for content and sections matching a query\n   * @param {string} query - The search query\n   * @returns {Object} Object with sections and content arrays\n   */\n  search(query) {\n    if (!query || query.trim() === '') {\n      return { sections: [], content: [] };\n    }\n    \n    const lowerQuery = query.toLowerCase().trim();\n    \n    // Search sections\n    const matchingSections = Object.keys(SITE_MAP)\n      .filter(key => {\n        const section = SITE_MAP[key];\n        return section.title.toLowerCase().includes(lowerQuery) ||\n               key.toLowerCase().includes(lowerQuery);\n      })\n      .map(key => ({ id: key, ...SITE_MAP[key] }));\n    \n    // Search content\n    const matchingContent = Object.keys(CONTENT_RELATIONSHIPS)\n      .filter(key => {\n        const content = CONTENT_RELATIONSHIPS[key];\n        return key.toLowerCase().includes(lowerQuery) ||\n               content.category.toLowerCase().includes(lowerQuery) ||\n               content.type.toLowerCase().includes(lowerQuery);\n      })\n      .map(key => ({ id: key, ...CONTENT_RELATIONSHIPS[key] }));\n    \n    return {\n      sections: matchingSections,\n      content: matchingContent\n    };\n  }\n  \n  /**\n   * Generate navigation links for a specific section\n   * @param {string} sectionId - The ID of the section\n   * @returns {Object} Navigation links for the section\n   */\n  getNavigationLinks(sectionId) {\n    const section = this.getSectionById(sectionId);\n    if (!section) return { parent: null, siblings: [], children: [], related: [] };\n    \n    // Get parent\n    const parent = section.parent ? this.getSectionById(section.parent) : null;\n    \n    // Get siblings (other sections with the same parent)\n    let siblings = [];\n    if (parent && parent.children) {\n      siblings = parent.children\n        .filter(id => id !== sectionId)\n        .map(id => this.getSectionById(id))\n        .filter(Boolean);\n    } else if (sectionId !== 'home') {\n      // If no parent (top-level section), siblings are other top-level sections\n      siblings = SITE_MAP.home.children\n        .filter(id => id !== sectionId)\n        .map(id => this.getSectionById(id))\n        .filter(Boolean);\n    }\n    \n    // Get children\n    const children = section.children ? \n      section.children.map(id => this.getSectionById(id)).filter(Boolean) : [];\n    \n    // Get related sections\n    const related = section.related ?\n      section.related.map(id => this.getSectionById(id)).filter(Boolean) : [];\n    \n    return {\n      parent: parent ? { id: section.parent, ...parent } : null,\n      siblings,\n      children,\n      related\n    };\n  }\n}\n\n// Create a singleton instance\nconst navigationService = new NavigationService();\n\n/**\n * React hook for using the navigation service in components\n */\nexport function useNavigation() {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [currentPath, setCurrentPath] = useState(location.pathname);\n  \n  useEffect(() => {\n    // Update current path when location changes\n    setCurrentPath(location.pathname);\n    navigationService.currentPath = location.pathname;\n  }, [location.pathname]);\n  \n  useEffect(() => {\n    // Subscribe to path changes\n    const handlePathChange = (e) => {\n      setCurrentPath(e.detail.path);\n    };\n    \n    // Add event listener for path changes\n    document.addEventListener('navigation:pathChanged', handlePathChange);\n    \n    // Cleanup on unmount\n    return () => {\n      document.removeEventListener('navigation:pathChanged', handlePathChange);\n    };\n  }, []);\n  \n  return {\n    currentPath,\n    navigateTo: (path) => {\n      navigate(path);\n      navigationService.navigateTo(path);\n    },\n    getSectionInfo: (path) => navigationService.getSectionInfo(path || currentPath),\n    getSectionById: (id) => navigationService.getSectionById(id),\n    getBreadcrumbs: (path) => navigationService.generateBreadcrumbs(path || currentPath),\n    getChildSections: (sectionId) => navigationService.getChildSections(sectionId),\n    getRelatedSections: (sectionId) => navigationService.getRelatedSections(sectionId),\n    getRelatedContent: (contentId, limit) => navigationService.getRelatedContent(contentId, limit),\n    getRecommendations: (limit) => navigationService.getPersonalizedRecommendations(limit),\n    recordContentView: (contentId, contentType, category) => \n      navigationService.recordContentView(contentId, contentType, category),\n    search: (query) => navigationService.search(query),\n    getNavigationLinks: (sectionId) => navigationService.getNavigationLinks(sectionId)\n  };\n}\n\nexport default navigationService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}